function TaxiDataStore() {
    var self = {};
    self.get = function(key) {
        var raw = $.cookie(key);
        if (raw) {
            return JSON.parse(raw);
        } else {
            return null;
        }
    };
    self.set = function(key, value) {
        $.cookie(key, JSON.stringify(value), {
            expires: 365,
            path: "/"
        });
    };
    return self;
};

function TaxiCustomCarComponent() {
    var self = {};
    self.enabled = false;
    self.createTimeout = 30000;
    self.messages = {
        createCarDefault: 'Желаемый вами борт находится далеко, предлагаем сделать заявку на ближайший борт?'
    };
    self.owner;
    self._tryCreateOrderAgain = function() {};
    self.checkOrderCar = function() {
        var info = self.owner.lastOrderInfo;
        if (info && !info.carColor && !info.carId && !info.carNumber && !info.carTime) {
            self.owner.modalConfirm(self.messages.createCarDefault, [{
                label: 'Нет',
                callback: function() {
                    self.owner.unlock();
                    self.owner.rejectOrder(function() {
                        return true;
                    });
                    return false;
                }
            }, {
                label: 'Да',
                callback: function() {
                    self.owner.unlock();
                    self.owner.rejectOrder(function() {
                        if (self.owner.lastCreateOrderValidationResult) {
                            self.owner.createOrder(self.owner.lastCreateOrderValidationResult);
                        }
                        return false;
                    });
                    return true;
                }
            }]);
        }
    };
    self.onOrderInfoUpdating = function(ordering) {
        if (!self.enabled) {
            return false;
        }
        self.owner = ordering;
        if (ordering.orderId && (ordering.customCarId > 0)) {
            self.enabled = false;
            setTimeout(function() {
                self.checkOrderCar();
            }, self.createTimeout);
        }
    };
    return self;
};

function TaxiRouteComponent() {
    var self = {};
    self._from = null;
    self._to = null;
    self._hotNeed = {
        from: false,
        to: false
    };
    self._geoData = {
        from: null,
        to: null
    };
    self.setFrom = function(value) {
        self._from = value;
        self._hotNeed.from = true;
    };
    self.setTo = function(value) {
        self._to = value;
        self._hotNeed.to = true;
    };
    self.getTo = function() {
        return self._to;
    };
    self.getFrom = function() {
        return self._from;
    };
    self.hotNeedUpdate = function(isFrom) {
        if (isFrom) {
            return self._hotNeed.from;
        } else {
            return self._hotNeed.to;
        }
    };
    self.resetHotNeedUpdate = function(isFrom) {
        if (isFrom) {
            self._hotNeed.from = false;
        } else {
            self._hotNeed.to = false;
        }
    };
    self.onGeoObjectSelect = function(geoData, isFrom) {
        geoData.address.location.lat = geoData.address.location[0];
        geoData.address.location.lon = geoData.address.location[1];
        if (geoData && typeof(geoData.address) !== 'undefined' && typeof(geoData.address.location) !== 'undefined' && typeof(geoData.address.location.lat) !== 'undefined' && geoData.address.location.lat > 0 && geoData.address.location.lon > 0) {
            if (isFrom) {
                self.setFrom(geoData.address.location);
                self._geoData.from = geoData;
            } else {
                self.setTo(geoData.address.location);
                self._geoData.to = geoData;
            }
        } else {
            self.resetHotNeedUpdate(isFrom);
            if (isFrom) {
                self.setFrom(null);
                self._geoData.from = null;
                self._hotNeed.from = false;
            } else {
                self.setTo(null);
                self._geoData.to = null;
                self._hotNeed.to = false;
            }
        }
    };
    self._createGeoLabel = function(isFrom) {
        var res = '';
        if (isFrom) {
            if (self._geoData.from) {
                return self._geoData.from.label;
            }
        } else {
            if (self._geoData.to) {
                return self._geoData.to.label;
            }
        }
        return res;
    };
    self._extractGeoPoint = function(obj) {
        return [obj.lat, obj.lon];
    };
    self._createGeoPoint = function(isFrom) {
        if (isFrom) {
            if (self._from) {
                return self._extractGeoPoint(self._from);
            }
        } else {
            if (self._to) {
                return self._extractGeoPoint(self._to);
            }
        }
        return null;
    };
    self.createTaxiRoutePoint = function(isFrom) {
        var point = {
            changed: true,
            city: "",
            house: "",
            housing: "",
            label: "Ленинградская область, Всеволожск",
            point: [60.019041, 30.645577],
            street: "Ленинградская область, Всеволожск",
            value: "Ленинградская область, Всеволожск"
        };
        point.label = point.street = point.value = self._createGeoLabel(isFrom);
        point.point = self._createGeoPoint(isFrom);
        if (isFrom) {
            point.geoData = self._geoData.from;
        } else {
            point.geoData = self._geoData.to;
        }
        return point;
    };
    return self;
};;

function TaxiCost() {
    this.enabled = true;
    this.currentRouteData = null;
    this.caller = new TaxiCostDefaultCaller();
};
TaxiCost.prototype = {
    display: function(cost) {},
    update: function(routeData) {
        this.currentRouteData = routeData;
        var cost = this.caller.callCost(routeData);
        this.display(cost);
    },
    callCost: function(routeData) {
        this.currentRouteData = routeData;
        var cost = this.caller.callCost(routeData);
        return cost;
    }
};
TaxiCostDefaultCaller = function() {};
TaxiCostDefaultCaller.prototype = {
    callCost: function(routeData) {
        var len = routeData.len;
        var time = routeData.timeInMinutes;
        var mileage = $('#tariff_travel option:selected').data('mileage');
        var landing = $('#tariff_travel option:selected').data('landing');
        var included = $('#tariff_travel option:selected').data('included');
        var minpricecity = $('#tariff_travel option:selected').data('minpricecity');
        var typetariff = $('#tariff_travel option:selected').data('typetariff');
        var cost = 0;
        if (typetariff == '0' || typetariff == '' || typetariff == undefined) {
            if ((len / 1000) > included) {
                cost = landing + (len / 1000 - included) * mileage;
            } else {
                cost = landing;
            }
            if (minpricecity > cost) {
                cost = minpricecity;
            }
        } else if (typetariff === '1') {
            if (time > included) {
                cost = landing + (time - included) * mileage;
            } else {
                cost = landing;
            }
            if (minpricecity > cost) {
                cost = minpricecity;
            }
        }
        var finalCost = Math.round(cost);
        finalCost = taxi.afterCallCost(finalCost);
        taxi.routesInfoLayout.cost = finalCost;
        return finalCost;
    }
};
TaxiCostRouteData = function() {
    this.rawFrom;
    this.rawTo;
    this.len;
    this.timeInMinutes;
    this.priorTime;
};;

function TaxiMethod_createOrder() {
    this.fromCity = '';
    this.fromStreet = '';
    this.fromHouse = '';
    this.fromHousing = '';
    this.fromPorch = '';
    this.fromLat = '';
    this.fromLon = '';
    this.toCity = '';
    this.toStreet = '';
    this.toHouse = '';
    this.toHousing = '';
    this.toPorch = '';
    this.toLat = '';
    this.toLon = '';
    this.clientName = '';
    this.phone = '';
    this.priorTime = '';
    this.customCarId = '';
    this.customCar = '';
    this.carType = '';
    this.carGroupId = '';
    this.tariffGroupId = '';
    this.comment = '';
};;

function TaxiOrderData() {
    this.statusLabel = 'Статус заказа';
    this.cost = 'Стоимость';
    this.carDescription = 'Вам назначена машина';
    this.carTime = 'Машина подъедет через';
    this.driverFio = 'Водитель';
    this.driverPhone = 'Телефон водителя';
    this.driverPhotoBase64 = 'Фотография';
    this.priorTime = 'Время и дата заказа';
    this.rawFrom = 'Место подачи автомобиля';
    this.rawTo = 'Куда';
    this.tariffInfo = 'Информация о тарифе';
    this.comment = 'Комментарий';
    this.detailOrderInfo = 'Детализация заказа';
    this.payHtml = 'Оплата банковской картой';
};
var inst = $('#colorboxEnterCode').remodal({
    hashTracking: false
});

function TaxiErrorsInfo() {
    this.command = '';
    this.count = 0;
    this.summaryText = '';
    this.summaryHtml = '';
    this.errors = {};
};;
TaxiClient = function() {
    var self = {};
    self.enabled = true;
    self.ajaxClientUrl = '/api_integration/index_client.php';
    self.isDevMode = true;
    self.log = function(variable) {
        if (self.isDevMode) {}
    };
    self.executeQuery = function(method) {
        if (!self.enabled) {
            return false;
        }
        if (typeof(method) !== 'object') {
            return false;
        }
        var url = self.ajaxClientUrl + '?command=' + method.name;
        $.ajax({
            async: method.async,
            url: url,
            type: 'post',
            timeout: method.timeout,
            data: method.params,
            dataType: 'json',
            success: function(response) {
                if (parseInt(response.status) > 0) {
                    method.successCallback(response.result);
                } else {
                    method.errorCallback();
                }
            },
            error: function() {
                if (method.tryCount > 1) {
                    method.tryCount = method.tryCount - 1;
                    setTimeout(function() {
                        self.executeQuery(method);
                    }, method.tryPause);
                }
                method.errorCallback();
            }
        });
    };
    return self;
};;
TaxiMethod = function(name) {
    var self = {};
    self.name = name;
    self.timeout = 75000;
    self.async = true;
    self.params = {};
    self.tryCount = 2;
    self.tryPause = 10000;
    self.successCallback = function() {};
    self.errorCallback = function() {
        self.displayLoadingInfo(self.messages.errors.onOrderInfoFail);
    };
    return self;
};;

function TaxiBitrixModalWindow() {
    var self = {};
    self.ajaxColorBoxPath = '/api_integration/include/bitrix/modal.php';
    self.callbacks = [];
    self.onClose = function() {
        taxi.ordering.unlock();
    };
    self.customConfirm = function(message, buttonsOptions) {
        if (!$('#modalColorbox').length) {
            $('div').eq(0).after('<div id="modalColorbox" style="display: none"><a class="modalColorbox cboxElement" href="' +
                self.ajaxColorBoxPath + '">hiddenModal</a></div>');
            $('.modalColorbox').colorbox({
                width: '90%',
                maxWidth: 562,
                autoScale: true,
                autoDimensions: true,
                onComplete: function() {
                    $('#cboxClose').hide();
                    $(window).off('cbox_closed.modalColorbox');
                    $(window).on('cbox_closed.modalColorbox', function() {
                        self.onClose();
                        $(window).off('cbox_closed.modalColorbox');
                    });
                    $(window).off('resize.modalColorbox');
                    $(window).on('resize.modalColorbox', function() {
                        $.colorbox.resize({
                            width: ($(window).width() < 562) ? '90%' : 562
                        });
                    }).trigger('resize.modalColorbox');
                }
            });
            $('#modalColorbox').data('modal_label', 'Внимание');
            $('#modalColorbox').data('modal_html', message);
        }
        $('#modalColorbox a').click();
        for (var i in buttonsOptions) {
            var n = i;
            n++;
            var nStr = n + '';
            $('#modalColorbox').data('modal_button_' + nStr, buttonsOptions[i].label);
            taxi.modal.callbacks[n] = buttonsOptions[i].callback;
        }
    };
    return self;
};;

function TaxiOrderProcess(client) {
    if (!Object.create) {
        Object.create = (function() {
            function F() {}
            return function(o) {
                if (arguments.length != 1) {
                    throw new Error('Object.create implementation only accepts one parameter.');
                }
                F.prototype = o;
                return new F()
            }
        })()
    }
    var self = Object.create({});
    self._enabled = true;
    self.store = new TaxiDataStore();
    self.components = {
        customCar: new TaxiCustomCarComponent(),
        route: new TaxiRouteComponent()
    };
    self.modalConfirm_useCustomCarInPriorOrder = '<p>Для предварительных заказов нельзя выбирать машину самостоятельно. Такие заказы обрабатываются автоматически.</p>' + '<p>Машина назначается автоматически. Выбранная вами машина учитываться не будет.</p>' + '<p>Создать заказ?</p>';
    self.messages = {
        errors: {
            onOrderInfoFail: '! Произошла ошибка: не удалось обновить информацию о заказе'
        }
    };
    self.timeouts = {
        options: {
            regression: {
                enabled: true,
                incresaseOnFailValue: 1.5,
                limit: 1000
            }
        },
        beforeFirstGetOrderInfo: 3000
    };
    self.lastOrderInfo = null;
    self.intervalOrderInfoUpdating = 3000;
    self._lastIntervalUpdatingCars = self.intervalUpdatingCars = 20000;
    self.orderId = $.cookie('api_order_id');
    self.customCarId = null;
    self.lastCreateOrderValidationResult = self.store.get('lastCreateOrderValidationResult');
    self.useCustomCarInPriorOrder = false;
    self.customCarInfo = null;
    self._isLocked = false;
    self._updatingOrder = false;
    self.needForceReAuth = false;
    self.hideRejectLink = false;
    self._browserKey = null;
    self._token = null;
    self._lastValidationResult = null;
    self.carId = null;
    self.orderIdLabel = null;
    self.phone = null;
    self.smsCode = null;
    self.fromLat = null;
    self.fromLon = null;
    self.toLat = null;
    self.toLon = null;
    self.onError = function(message, errorInfo) {
        alert(message);
    };
    self.isOnFinalState = function() {
        return self.carId > 0;
    };
    self.getFromPoint = function() {
        if (self.fromLat > 0 && self.fromLon > 0) {
            var point = [self.fromLat, self.fromLon];
            return point;
        } else {
            return false;
        }
    };
    self.getToPoint = function() {
        if (self.toLat > 0 && self.toLon > 0) {
            return [self.toLat, self.toLon];
        } else {
            return false;
        }
    };
    self.animateBusy = function() {
        $('.loader').css('display', 'block');
    };
    self.animateUnbusy = function() {
        $('.loader').css('display', 'none');
    };
    self.lock = function() {
        self.animateBusy();
        self._isLocked = true;
        setTimeout(function() {
            self.unlock();
        }, 30000);
    };
    self.unlock = function() {
        self.animateUnbusy();
        self._isLocked = false;
    };
    self.isLocked = function() {
        return self._isLocked;
    };
    if (!client) {
        self.client = new TaxiClient();
    } else {
        self.client = client;
    }
    self.applyTimeoutsRegression = function(oldValue, callback) {
        var newValue = oldValue;
        var options = self.timeouts.options.regression;
        if (options.enabled) {
            newValue = Math.round(options.incresaseOnFailValue * oldValue);
            if (newValue > options.limit) {
                newValue = oldValue;
            }
        }
        if (typeof(callback) === 'function') {
            callback(newValue);
        }
        return newValue;
    };
    self.sendToClient = function(methodName, params, onSuccess, onFail) {
        if (!self._enabled) {
            return false;
        }
        var method = new TaxiMethod(methodName);
        method.successCallback = onSuccess;
        method.errorCallback = onFail || function() {};
        method.params = params;
        self.client.executeQuery(method);
    };
    self.checkSmsAuthorization = function(validationResult) {
        self.phone = validationResult.paramsToValidate.phone;
        self.sendToClient('sendSms', {
            phone: self.phone
        }, function(sendSmsResult) {
            if (sendSmsResult.resultCode > 0) {
                alert('Тестовый код -- ' + sendSmsResult.resultCode);
            }
            if (sendSmsResult.isAuthorizedNow) {
                self.createOrder(validationResult);
            } else {
                self.showEnterSmsCodeWindow();
            }
        }, function() {
            alert('Не удалось отправить смс на указанный телефон');
        });
    };
    self.forceSmsAuthorization = function(onSuccess) {
        if (!self.phone) {
            alert('Невозможно обновить информацию о заказе, так как необходима авторизация!');
            self.phone = prompt("Введите ваш телефон снова:");
        }
        if (!self.phone) {
            return;
        }
        self.phone;
        self.sendToClient('sendSms', {
            phone: self.phone
        }, function(sendSmsResult) {
            if (sendSmsResult.isAuthorizedNow) {
                onSuccess();
            } else {
                self.showEnterSmsCodeWindow();
            }
        });
    };
    self.createLastOrder = function() {
        if (self._lastValidationResult) {
            self.createOrder(self._lastValidationResult);
        }
    };
    self._afterCreateOrder = function(orderId) {
        self._saveCookie('api_order_id', orderId);
        self._saveCookie('api_order_custom_car_id', self.customCarId);
        self._saveCookie('api_order_custom_car_info', self.customCarInfo);
        window.location.reload();
    };
    self.onNewOrder = function() {
        self._saveCookie('api_order_id', '');
        self._saveCookie('api_order_custom_car_id', '');
        self._saveCookie('api_order_custom_car_info', '');
        self._saveCookie('fromLat', '');
        self._saveCookie('fromLon', '');
        self._saveCookie('toLat', '');
        self._saveCookie('toLon', '');
    };
    self.saveGeoData = function(params) {
        self._saveCookie('fromLat', params.fromLat);
        self._saveCookie('fromLon', params.fromLon);
        self._saveCookie('toLat', params.toLat);
        self._saveCookie('toLon', params.toLon);
    };
    self.deleteGeoData = function() {
        self._saveCookie('fromLat', '');
        self._saveCookie('fromLon', '');
        self._saveCookie('toLat', '');
        self._saveCookie('toLon', '');
    };
    self.createOrder = function(validationResult) {
        self.lastCreateOrderValidationResult = validationResult;
        self.store.set('lastCreateOrderValidationResult', validationResult);
        self.saveGeoData(validationResult.paramsToValidate);
        self.lock();
        var createOrderQuery = new TaxiMethod('createOrder');
        createOrderQuery.tryCount = 1;
        createOrderQuery.params = validationResult.paramsToValidate;
        createOrderQuery.successCallback = function(result) {
            var orderId = result;
            if (orderId != 'waitTime' && orderId !== '' && orderId !== null && orderId !== false && orderId !== 'server_interanl_error') {
                self.orderId = orderId;
                self.sendForm();
                self._afterCreateOrder(orderId);
                self.afterCreateOrder(orderId);
                self.startOrderInfoUpdating(orderId);
            } else if (orderId == 'waitTime') {
                self.unlock();
                var errorsInfo = new TaxiErrorsInfo();
                errorsInfo.summaryHtml = errorsInfo.summaryText = '<p style="color:red">Создано максимальное количество заказов. Поробуйте через 30 мин.</p>';
                errorsInfo.count = 1;
                self.displayErrors(errorsInfo);
            } else {
                self.unlock();
                var errorsInfo = new TaxiErrorsInfo();
                errorsInfo.summaryHtml = errorsInfo.summaryText = '<p style="color:red">Не удалось создать заказ</p>';
                errorsInfo.count = 1;
                self.displayErrors(errorsInfo);
            }
        };
        createOrderQuery.errorCallback = function() {
            self.onError('Возникла ошибка при создании заказа!');
            self.unlock();
        };
        self.client.executeQuery(createOrderQuery);
    };

    self.afterLogin = function(loginResult) {
        if (loginResult.token && loginResult.browserKey) {
            self.setToken(loginResult.token);
            self.setBrowserKey(loginResult.browserKey);
        }
    };

    self.onSubmitOrderForm = function() {
        if (self.isLocked()) {
            return false;
        }
        self.lock();
        var createOrderQuery = self.createOrderQuery();
        var validateQuery = new TaxiMethod('validateCommand');
        validateQuery.params = {
            command: 'createOrder',
            paramsToValidate: createOrderQuery
        };
        validateQuery.successCallback = function(validationResult) {
            self._lastValidationResult = validationResult;
            if (validationResult.hasErrors) {
                self.displayErrors(validationResult.errorsInfo);
                self.unlock();
            } else {
                self.nextActions = function(validationResult) {
                    self.components.customCar.enabled = false;
                    self.phone = validationResult.paramsToValidate.phone;
                    self.updateNeedSmsAuthorizationFlag(function(needSendSms) {
                        if (needSendSms == 1) {
                            self.checkSmsAuthorization(validationResult);
                        } else if (needSendSms == 0) {
                            self.createOrder(validationResult);
                            $('.order_step_2').fadeOut(200);
                            setTimeout(function() {
                                $('.order_step_4').fadeIn(200);
                            }, 201);
                        } else if (needSendSms == 2) {
                            alert('Ваш телефон в чёрном списке!');
                            self.unlock();
                        }
                    });
                };
                if (!self.useCustomCarInPriorOrder && createOrderQuery.priorTime && (createOrderQuery.customCar || createOrderQuery.customCar)) {
                    self.modalConfirm(
                        self.modalConfirm_useCustomCarInPriorOrder, [{
                            label: 'Нет',
                            callback: function() {
                                self.unlock();
                                return false;
                            }
                        }, {
                            label: 'Создать',
                            callback: function() {
                                self.unlock();
                                self.nextActions(validationResult);
                                return true;
                            }
                        }]
                    );
                } else {
                    self.nextActions(validationResult);
                }
            }
        };
        validateQuery.errorCallback = function() {
            self.unlock();
        };
        self.client.executeQuery(validateQuery);
    };

    self.afterCreateOrder = function(orderId) {};

    self.disableUpdatingCars = function() {
        self._lastIntervalUpdatingCars = self.intervalUpdatingCars;
        self.intervalUpdatingCars = 0;
    };
    self.enableUpdatingCars = function() {
        if (!self._lastIntervalUpdatingCars) {
            self._lastIntervalUpdatingCars = 10000;
        }
        self.intervalUpdatingCars = self._lastIntervalUpdatingCars;
        taxi.startNextUpdateCarMarks();
    };
    self.getUpdateCarsInterval = function() {
        return self.intervalUpdatingCars;
    };
    self.HideShowLinks = function(status) {
        switch (status) {
            case 'new':
                $(document).ready(function() {
                    $('#reject_order').show();
                    $('#send_review').hide();
                });
                break;
            case 'car_assigned':
                $(document).ready(function() {
                    $('#reject_order').show();
                    $('#send_review').hide();
                });
                break;
            case 'rejected':
                $(document).ready(function() {
                    $('#reject_order').hide();
                    $('#send_review').hide();
                });
                break;
            case 'car_at_place':
                $(document).ready(function() {
                    $('#reject_order').hide();
                    $('#send_review').hide();
                });
                break;
            case 'executing':
                $(document).ready(function() {
                    $('#reject_order').hide();
                    $('#send_review').hide();
                });
                break;
            case 'completed':
                $(document).ready(function() {
                    $('#reject_order').hide();
                    $('#send_review').show();
                });
                break;
            case 'driver_busy':
                break;
            default:
                break;
        }
    }
    self.addOrderPoints = function() {
        var fromLat = self._readCookie('fromLat');
        var fromLon = self._readCookie('fromLon');
        var toLat = self._readCookie('toLat');
        var toLon = self._readCookie('toLon');
        placemark1 = new ymaps.Placemark([fromLat, fromLon], {
            iconContent: ""
        }, {
            draggable: false,
            iconImageHref: '/bitrix/templates/taxi_yellow/i/A.png',
            iconImageSize: [41, 36],
        });
        yandexMap.map.geoObjects.add(placemark1);
        placemark2 = new ymaps.Placemark([toLat, toLon], {
            iconContent: ""
        }, {
            draggable: false,
            iconImageHref: '/bitrix/templates/taxi_yellow/i/B.png',
            iconImageSize: [41, 36]
        });
        yandexMap.map.geoObjects.add(placemark2);
        if ((placemark1) && (placemark2)) {
            ymaps.route([{
                type: 'wayPoint',
                point: [fromLat, fromLon]
            }, {
                type: 'wayPoint',
                point: [toLat, toLon]
            }]).then(function(router) {
                var points = router.getWayPoints();
                points.get(0).properties.set('iconImageHref', '/bitrix/templates/taxi_yellow/i/A.png');
                points.get(0).properties.set('iconImageSize', [41, 36]);
                points.get(1).properties.set('iconImageHref', '/bitrix/templates/taxi_yellow/i/B.png');
                points.get(1).properties.set('iconImageSize', [41, 36]);
                router.getPaths().options.set({
                    strokeWidth: 5,
                    strokeColor: '0000ffff',
                    opacity: 0.8
                });
                yandexMap.map.geoObjects.add(router.getPaths());
            }, function(error) {});
        };
    };
    self.updateOrderInfo = function(after) {
        self.addOrderPoints();
        if (self.hideRejectLink) {
            $(document).ready(function() {
                $('#reject_order').hide();
            });
        }
        if (self._updatingOrder) {
            return false;
        }
        self._updatingOrder = true;
        if (self.orderId !== '') {
            var orderInfoQuery = new TaxiMethod('getOrderInfo');
            orderInfoQuery.params = {
                orderId: self.orderId
            };
            orderInfoQuery.successCallback = function(result) {
                self.unlock();
                if (result) {
                    self.HideShowLinks(result.status);
                    self.orderIdLabel = result.idLabel;
                    self.carId = result.carId;
                    self.fromLat = result.fromLat;
                    self.fromLon = result.fromLon;
                    self.lastOrderInfo = result;
                    if (typeof(after) === 'function') {
                        after();
                    }
                    self.displayOrderInfo(result);
                } else if (result === false) {
                    if (self.lastOrderInfo) {
                        self.lastOrderInfo.summaryHtml = $(self.lastOrderInfo.summaryHtml).find('div p').eq(0).append('<p>' + self.messages.errors.onOrderInfoFail + '</p>')
                        self.displayLoadingInfo(self.messages.errors.onOrderInfoFail);
                    } else {
                        self.displayLoadingInfo(self.messages.errors.onOrderInfoFail);
                    }
                }
                if (self.components.customCar.enabled) {
                    self.components.customCar.onOrderInfoUpdating(self);
                }
                if (!result) {
                    self.applyTimeoutsRegression(self.intervalOrderInfoUpdating, function(newValue) {
                        self.intervalOrderInfoUpdating = newValue;
                    });
                }
                setTimeout(function() {
                    self.updateOrderInfo();
                }, self.intervalOrderInfoUpdating);
                self._updatingOrder = false;
            };
            orderInfoQuery.errorCallback = function() {
                self.unlock();
                self.applyTimeoutsRegression(self.intervalOrderInfoUpdating, function(newValue) {
                    self.intervalOrderInfoUpdating = newValue;
                });
                if (self.needForceReAuth) {
                    self.updateNeedSmsAuthorizationFlag(function(needSendSms) {
                        if (needSendSms == 1) {
                            self.forceSmsAuthorization(function() {
                                self.updateOrderInfo();
                            });
                        } else if (needSendSms == 0) {
                            self.updateOrderInfo();
                        }
                    });
                }
                self._updatingOrder = true;
            };
            self.client.executeQuery(orderInfoQuery);
        }
    };
    self.startOrderInfoUpdating = function(orderId) {
        if (orderId.length) {
            self.orderId = orderId;
        }
        $('h4.title_order_info').text('Выполнено успешно. Заказ создан. Информация по заказy №' + orderId);
        setTimeout(function() {
            self.updateOrderInfo();
        }, self.timeouts.beforeFirstGetOrderInfo);
        return true;
    };
    self.sendForm = function() {};
    self.createOrderQuery = function() {};

    self.setDefaultCity = function(defaultCity) {};

    self.displayErrors = function(errorsInfo) {};
    self.displayOrderInfo = function(orderInfo) {};
    self.displayLoadingInfo = function(text) {};
    self.rejectOrder = function(afterReject) {
        if (self.orderId.length) {
            var rejectOrderQuery = new TaxiMethod('rejectOrder');
            rejectOrderQuery.params = {
                orderId: self.orderId
            };
            rejectOrderQuery.successCallback = function(result) {
                self.deleteGeoData();
                if (result) {
                    var stop = false;
                    if (afterReject) {
                        stop = !afterReject();
                    }
                    if (!stop) {
                        self.afterRejectOrder();
                        self.updateOrderInfo();
                    }
                } else {
                    alert('Не удалось отменить заказ');
                }
            };
            rejectOrderQuery.errorCallback = function() {
                alert('Не удалось отменить заказ');
            };
            self.client.executeQuery(rejectOrderQuery);
        }
    };
    self.afterRejectOrder = function() {};
    self.updateNeedSmsAuthorizationFlag = function(doneFunction) {
        var query = new TaxiMethod('needSendSms');
        if (self.phone) {
            query.params = {
                phone: self.phone
            };
        }
        query.successCallback = function(result) {
            doneFunction(result);
        };
        self.client.executeQuery(query);
    };
    self._saveCookie = function(key, value) {
        $.cookie(key, value, {
            expires: 365,
            path: "/"
        });
    };
    self._readCookie = function(key) {
        var res = $.cookie(key);
        if (res) {
            self._updateCookie(key);
        }
        return res;
    };
    self._updateCookie = function(key) {
        self._saveCookie(key, $.cookie(key));
    };
    self.setBrowserKey = function(key) {
        self._browserKey = key;
        self._saveCookie('api_browser_key', key);
    };
    self.getBrowserKey = function() {
        return self._browserKey = self._readCookie('api_browser_key');
    };
    self.setToken = function(token) {
        self._token = token;
        self._saveCookie('api_token', token);
    };
    self.getToken = function() {
        return self._token = self._readCookie('api_browser_key');
    };
    self.showEnterSmsCodeWindow = function() {};

    self.updateDefaultCity = function() {
        cityName = $('#taxi_city option:selected').text();
        self.setDefaultCity(cityName);

        /*self.sendToClient(
        	'getDefaultCity',
        	{},
        	function(cityName){
        		self.setDefaultCity(cityName);
        	},
        	function(){}
        );//*/
    };

    self.enable = function() {
        self._enabled = true;
    };
    self.disable = function() {
        self._enabled = false;
    };
    self.updateCustomCarInfo = function() {};
    self.selectCustomCar = function(carId, label) {
        taxi.ordering.customCarId = carId;
        taxi.ordering.customCarInfo = label;
        self.updateCustomCarInfo();
    };
    self.removeCustomCarSelection = function() {
        self.selectCustomCar(null, '');
    };
    taxi.modal = new TaxiBitrixModalWindow();
    self.modalConfirm = function(message, buttonsOptions) {
        return taxi.modal.customConfirm(message, buttonsOptions);
    };
    self.autoInit = function() {
        self.sendToClient('getJsInitializationCode', {}, function(code) {
            eval(code);
            if (self._enabled) {
                self.updateNeedSmsAuthorizationFlag(function(result) {
                    if (result && result.length > 1) {
                        if (!self.getBrowserKey()) {
                            self.setBrowserKey(result);
                        }
                    }
                });
                self.updateDefaultCity();
            };
        }, function() {});
    };
    $(document).ready(function() {
        self.autoInit();
    });
    return self;
};;
var TaxiBitrixOrderProcess = function(client) {
    var self = new TaxiOrderProcess(client);
    self.updateCustomCarInfo = function() {
        var html = '';
        if (self.useNewTemplate()) {
            if ($('.custom_car_info').length === 0) {
                $('p:has("#FIELD_FIO")').before('<div class="custom_car_info">');
            }
            html = '<div style="display: block; margin: 10px 5px;" class="control-group   no_quickly">' + '' + '' + '' + '' + '<div class="custom_car_info"><p style="color: #000">Выбрано авто: ' + self.customCarInfo + '  <a class="remove_custom_car" style="color: #555; cursor: pointer;">Отменить</a></p></div>' + '</div>' + '';
        } else {
            html = '<div style="display: block;" class="control-group   no_quickly">' + '<label for="FIELD_TYPE_AUTO" class="control-label ">' + 'Выбор машины' + '</label>' + '<div class="controls">' + '<div class="custom_car_info"><p style="color: #FFF">Выбрано авто: ' + self.customCarInfo + '  <a class="remove_custom_car" style="color: #999; cursor: pointer;">Отменить</a></p></div>' + '</div>' + '</div>';
        }
        if (self.customCarInfo && self.customCarId > 0) {
            $('.custom_car_info').html(html);
        } else {
            $('.custom_car_info').html('');
        };
        $('.remove_custom_car').on('click', function(event) {
            event.stopPropagation();
            event.preventDefault();
            var _this = $(this);
            self.removeCustomCarSelection();
        });
    };
    self.afterConstruct = function() {
        $('#FIELD_TEL').closest('.control-group').before('<div class="custom_car_info"></div>');
        self.updateCustomCarInfo();
    };
    jQuery(document).ready(function($) {
        self.afterConstruct();
    });
    self.sendForm = function() {
        if (self.useNewTemplate()) {
            setTimeout(function() {
                $('.order-taxi-inner form[name=iblock_add]').submit();
            }, 3000);
        } else {
            $('.knopka input').addClass('stopOrderProccess');
            $('.knopka button[name=iblock_submit]').click();
        }
    };

    self.createOrderQuery = function() {
        var query = new TaxiMethod_createOrder();
        query.fromCity = '';
        query.fromStreet = $("#FIELD_ADDRESS").val();
        query.fromHouse = $("#FIELD_FROM_HOUSE").val();
        query.fromHousing = $("#FIELD_FROM_HOUSING").val();
        query.fromPorch = $("#FIELD_FROM_PORCH").val();
        /*query.fromLat = taxi.ordering.fromLat + '';
        query.fromLon = taxi.ordering.fromLon + '';*/
        query.fromLat = $('#FIELD_FROM_LAT').val();
        query.fromLon = $('#FIELD_FROM_LON').val();
        query.toCity = '';
        query.toStreet = $("#FIELD_ADDRESS_TO").val();
        query.toHouse = $("#FIELD_TO_HOUSE").val();
        query.toHousing = $("#FIELD_TO_HOUSING").val();
        query.toPorch = $("#FIELD_TO_PORCH").val();
        /*query.toLat = $("#districts :selected").data('lat');
        query.toLon = $("#districts :selected").data('lon');*/
        query.phone = $("#FIELD_TEL").val();
        if (taxi.ordering.useNewTemplate()) {
            query.priorTime = $('.order-taxi-when-date input').val();
        } else {
            query.priorTime = $('label[for=FIELD_DATA] ~ .controls input').val();
        }
        query.carType = $('#tariff_travel option:selected').text();
        query.clientName = $("#FIELD_FIO").val();
        query.comment = $("#FIELD_COMM").val();
        query.tariffGroupId = $('#tariff_travel option:selected').val();

        if ($('#options').html() != '') {
            query.comment += ', ' + $('#options').html();
        }
        /*$('label[for=FIELD_DOP] ~ .controls input[type=checkbox]:checked').each(function(index){
        		query.comment+=''+$(this).closest('label').text().toString().trim()+', ';
        });//*/

        query.customCar = taxi.ordering.customCarInfo;
        if (taxi.ordering.customCarId > 0) {
            query.customCarId = taxi.ordering.customCarId;
        } else {
            query.customCarId = $("#FIELD_AUTO_ID").val();
        }
        return query;
    };
    self.afterCreateOrder = function(orderId) {};
    self.displayErrors = function(errorsInfo) {
        $('.errortext').remove();
        if ($('#myTab').length > 0) {
            $('#myTab').after(errorsInfo.summaryHtml);
        } else {
            $('.order-taxi-inner').eq(0).before(errorsInfo.summaryHtml);
        }
    };
    self.displayOrderInfo = function(orderInfo) {
        var label = '';
        if (self.orderIdLabel) {
            label = self.orderIdLabel;
        } else {
            label = self.orderId;
        }
        var data = new TaxiOrderData();
        var res = "<div>";
        for (var property in orderInfo) {
            if (orderInfo[property] !== null && orderInfo[property] !== '') {
                if (property === 'driverPhotoBase64') {
                    res += "<p>Фотография: <p><img id='driverPhotoId' src='data: image/jpeg;base64," + orderInfo[property] + "'  alt='Фотография'/></p></p>";
                } else if (property === 'cost') {
                    res += "<p>Стоимость: " + orderInfo['cost'] + " " + orderInfo['costCurrency'] + "</p>";
                } else if (property === 'carTime') {
                    res += "<p>Машина подъедет через: " + orderInfo['carTime'] + " мин." + "</p>";
                } else if (data[property]) {
                    res += "<p>" + data[property] + ": " + orderInfo[property] + "</p>";
                }
            }
        }
        res += "</div>";
        $('h4.title_order_info').text('Заказ создан. Информация по заказy №' + label);
        $('#result_order').html(res);
        $('#loading_info').hide();
    };
    self.displayLoadingInfo = function(text) {
        $('#loading_info').show();
        $('#loading_info font').text(text);
    };
    self.afterRejectOrder = function() {
        $('#reject_order').find('font').text('Заказ успешно отменен');
        $('#reject_order').removeClass('active');
        $(this).attr('id', '');
    }; /*self.showEnterSmsCodeWindow=function(){$('#colorboxEnterCode').click();*/ //inst.open();self.unlock();};
    self.showEnterSmsCodeWindow = function() { /*$('#colorboxEnterCode').click();//*/
        var inst = $('#colorboxEnterCode').remodal({
            hashTracking: false
        });
        inst.open();
        self.unlock();
    };

    self.setDefaultCity = function(cityName) {
        /*$('#FIELD_CITY_OTKUDA').val(cityName);
        $('#FIELD_CITY_KUDA').val(cityName);*/
        var url = '/api_integration/include/bitrix/ajax_store_default_city.php';
        $.ajax({
            url: url,
            type: 'post',
            data: {
                defaultCity: cityName
            },
            success: function(response) {}
        });
    };

    self.useNewTemplate = function() {
        return $('.detailed-order-taxi-wrapper').length > 0;
    };
    return self;
};;
(function() {
    if (window.google && google.gears) {
        return;
    }
    var factory = null;
    if (typeof GearsFactory !== 'undefined') {
        factory = new GearsFactory();
    } else {
        try {
            factory = new ActiveXObject('Gears.Factory');
            if (factory.getBuildInfo().indexOf('ie_mobile') != -1) {
                factory.privateSetGlobalObject(this);
            }
        } catch (e) {
            if ((typeof navigator.mimeTypes != 'undefined') && navigator.mimeTypes["application/x-googlegears"]) {
                factory = document.createElement("object");
                factory.style.display = "none";
                factory.width = 0;
                factory.height = 0;
                factory.type = "application/x-googlegears";
                document.documentElement.appendChild(factory);
                if (factory && (typeof factory.create == 'undefined')) {
                    factory = null;
                }
            }
        }
    }
    if (!factory) {
        return;
    }
    if (!window.google) {
        google = {};
    }
    if (!google.gears) {
        google.gears = {
            factory: factory
        };
    }
})();
var bb_successCallback;
var bb_errorCallback;
var bb_blackberryTimeout_id = -1;

function handleBlackBerryLocationTimeout() {
    if (bb_blackberryTimeout_id != -1) {
        bb_errorCallback({
            message: "Timeout error",
            code: 3
        });
    }
}

function handleBlackBerryLocation() {
    clearTimeout(bb_blackberryTimeout_id);
    bb_blackberryTimeout_id = -1;
    if (bb_successCallback && bb_errorCallback) {
        if (blackberry.location.latitude == 0 && blackberry.location.longitude == 0) {
            bb_errorCallback({
                message: "Position unavailable",
                code: 2
            });
        } else {
            var timestamp = null;
            if (blackberry.location.timestamp) {
                timestamp = new Date(blackberry.location.timestamp);
            }
            bb_successCallback({
                timestamp: timestamp,
                coords: {
                    latitude: blackberry.location.latitude,
                    longitude: blackberry.location.longitude
                }
            });
        }
        bb_successCallback = null;
        bb_errorCallback = null;
    }
}
var geo_position_js = function() {
    var pub = {};
    var provider = null;
    pub.getCurrentPosition = function(successCallback, errorCallback, options) {
        provider.getCurrentPosition(successCallback, errorCallback, options);
    };
    pub.init = function() {
        try {
            if (typeof(geo_position_js_simulator) != "undefined") {
                provider = geo_position_js_simulator;
            } else if (typeof(bondi) != "undefined" && typeof(bondi.geolocation) != "undefined") {
                provider = bondi.geolocation;
            } else if (typeof(navigator.geolocation) != "undefined") {
                provider = navigator.geolocation;
                pub.getCurrentPosition = function(successCallback, errorCallback, options) {
                    function _successCallback(p) {
                        if (typeof(p.latitude) != "undefined") {
                            successCallback({
                                timestamp: p.timestamp,
                                coords: {
                                    latitude: p.latitude,
                                    longitude: p.longitude
                                }
                            });
                        } else {
                            successCallback(p);
                        }
                    }
                    provider.getCurrentPosition(_successCallback, errorCallback, options);
                }
            } else if (typeof(window.google) != "undefined" && typeof(google.gears) != "undefined") {
                provider = google.gears.factory.create('beta.geolocation');
            } else if (typeof(Mojo) != "undefined" && typeof(Mojo.Service.Request) != "Mojo.Service.Request") {
                provider = true;
                pub.getCurrentPosition = function(successCallback, errorCallback, options) {
                    parameters = {};
                    if (options) {
                        if (options.enableHighAccuracy && options.enableHighAccuracy == true) {
                            parameters.accuracy = 1;
                        }
                        if (options.maximumAge) {
                            parameters.maximumAge = options.maximumAge;
                        }
                        if (options.responseTime) {
                            if (options.responseTime < 5) {
                                parameters.responseTime = 1;
                            } else if (options.responseTime < 20) {
                                parameters.responseTime = 2;
                            } else {
                                parameters.timeout = 3;
                            }
                        }
                    }
                    r = new Mojo.Service.Request('palm://com.palm.location', {
                        method: "getCurrentPosition",
                        parameters: parameters,
                        onSuccess: function(p) {
                            successCallback({
                                timestamp: p.timestamp,
                                coords: {
                                    latitude: p.latitude,
                                    longitude: p.longitude,
                                    heading: p.heading
                                }
                            });
                        },
                        onFailure: function(e) {
                            if (e.errorCode == 1) {
                                errorCallback({
                                    code: 3,
                                    message: "Timeout"
                                });
                            } else if (e.errorCode == 2) {
                                errorCallback({
                                    code: 2,
                                    message: "Position Unavailable"
                                });
                            } else {
                                errorCallback({
                                    code: 0,
                                    message: "Unknown Error: webOS-code" + errorCode
                                });
                            }
                        }
                    });
                }
            } else if (typeof(device) != "undefined" && typeof(device.getServiceObject) != "undefined") {
                provider = device.getServiceObject("Service.Location", "ILocation");
                pub.getCurrentPosition = function(successCallback, errorCallback, options) {
                    function callback(transId, eventCode, result) {
                        if (eventCode == 4) {
                            errorCallback({
                                message: "Position unavailable",
                                code: 2
                            });
                        } else {
                            successCallback({
                                timestamp: null,
                                coords: {
                                    latitude: result.ReturnValue.Latitude,
                                    longitude: result.ReturnValue.Longitude,
                                    altitude: result.ReturnValue.Altitude,
                                    heading: result.ReturnValue.Heading
                                }
                            });
                        }
                    }
                    var criteria = new Object();
                    criteria.LocationInformationClass = "BasicLocationInformation";
                    provider.ILocation.GetLocation(criteria, callback);
                }
            } else if (typeof(window.blackberry) != "undefined" && blackberry.location.GPSSupported) {
                if (typeof(blackberry.location.setAidMode) == "undefined") {
                    return false;
                }
                blackberry.location.setAidMode(2);
                pub.getCurrentPosition = function(successCallback, errorCallback, options) {
                    bb_successCallback = successCallback;
                    bb_errorCallback = errorCallback;
                    if (options['timeout']) {
                        bb_blackberryTimeout_id = setTimeout("handleBlackBerryLocationTimeout()", options['timeout']);
                    } else {
                        bb_blackberryTimeout_id = setTimeout("handleBlackBerryLocationTimeout()", 60000);
                    }
                    blackberry.location.onLocationUpdate("handleBlackBerryLocation()");
                    blackberry.location.refreshLocation();
                }
                provider = blackberry.location;
            }
        } catch (e) {
            alert("error=" + e);
            if (typeof(console) != "undefined") {}
            return false;
        }
        return provider != null;
    }
    return pub;
}();
var Collection = function() {
    var self = this;
    this.collection = [];
    return {
        add: function(item) {
            self.collection.push(item);
        },
        get: function(name) {
            var item;
            for (var i = self.collection.length - 1; i >= 0; i--) {
                if (self.collection[i].name === name) {
                    item = self.collection[i];
                }
            }
            return item;
        },
        first: function() {
            return self.collection[0];
        }
    };
};;
window["taxi"] = new function() {
    var self = this;
    self.points = [null, null];
    self.city = '';
    self.geocoder = function() {};
    self.map = function() {};
    self.routeinfo = function() {};
    self.geocoders = new Collection();
    self.maps = new Collection();
    self.selectGeocoder = function(name) {
        self.geocoder = self.geocoders.get(name).fn;
        return self;
    };
    self.setCity = function(city) {
        self.city = city;
        return self;
    };
    self.startInput = function(fn) {
        if (typeof(fn) === 'function') {
            self.startInput = fn;
        }
        return self.startInput;
    };
    self.endInput = function(fn) {
        if (typeof(fn) === 'function') {
            self.endInput = fn;
        }
        return self.endInput;
    };
    return {
        maps: function() {
            return self.maps;
        },
        map: function() {
            return self.maps.first();
        },
        startpoint: function(point, skip) {
            if (typeof(point) === 'object') {
                self.points[0] = point;
                self.map.setPoints(self.points);
                skip = skip || "";
                self.startInput(point, skip);
            }
            return self.points[0];
        },
        findpoints: function() {
            return self.points;
        },
        endpoint: function(point, skip) {
            if (typeof(point) === 'object') {
                self.points[1] = point;
                self.map.setPoints(self.points);
                skip = skip || "";
                self.endInput(point, skip);
            }
            return self.points[1];
        },
        addGeocoder: function(name, fn) {
            self.geocoders.add({
                name: name,
                fn: fn
            });
            return self;
        },
        geocoder: function(find, limit, callback) {
            return self.geocoder.find(find, limit, callback);
        },
        mypos: function(loc, callback) {
            return self.map.mypos(loc, callback);
        },
        mypos2: function(loc, callback) {
            return self.map.mypos2(loc, callback);
        },
        addMap: function(name, fn) {
            self.maps.add({
                name: name,
                fn: fn
            });
            return self;
        },
        selectMap: function(name) {
            self.map = self.maps.get(name).fn;
            var taxiObj = this;
            self.map.init({
                geocoder: self.geocoder.find,
                city: self.city,
                mapcontainer: self.mapcontainer,
                points: self.points,
                startpoint: function(res) {
                    taxiObj.startpoint(res);
                },
                endpoint: function(res) {
                    taxiObj.endpoint(res);
                },
                startInput: function(res) {
                    self.startInput(res);
                },
                endInput: function(res) {
                    self.endInput(res);
                },
                routeinfo: function(res) {
                    self.routeinfo(res);
                }
            });
            return self;
        },
        init: function(param) {
            self.routeinfo = param.routeinfo;
            self.startInput = param.startInput;
            self.endInput = param.endInput;
            self.setCity(param.city);
            self.selectGeocoder(param.geocoder);
            self.mapcontainer = param.mapcontainer;
            this.selectMap(param.map);
        },
        wayPointsData: []
    };
};
var taxi = window["taxi"];;

$(document).ready(function() {
    taxi.yandexRoutesStrokeColor = '0000ffee';
    taxi.yandexRoutesOpacity = 0.9;
    taxi.addMap('yandex', new function() {
        if (typeof(ymaps) === "undefined" || ymaps === null) {
            return;
        }
        var yandexMap = this;
        window.yandexMap = this;
        yandexMap.route = null;
        yandexMap.point_source = null;
        yandexMap.mypos = null;
        yandexMap.points = null;
        yandexMap.lastRoute = null;
        taxi.yandexMap = yandexMap;

        function ymapsinit() {
            yandexMap.geocoder(
                $('#taxi_city option:selected').text(), //'bălți',//yandexMap.city,
                1,
                function(res) {
                    var pos = res[0].point;
                    if (typeof(taxi.yandexMapBehaviors) === 'undefined') {
                        taxi.yandexMapBehaviors = ['default', 'multiTouch'];
                    }
                    yandexMap.map = new ymaps.Map(yandexMap.mapcontainer, {
                        center: [pos[0], pos[1]],
                        zoom: 11,
                        behaviors: taxi.yandexMapBehaviors,
                        load: ['package.traffic']
                    });
                    yandexMap.map.controls.add('zoomControl').add('typeSelector');
                    var traffic = new ymaps.control.TrafficControl();
                    yandexMap.map.controls.add(traffic);
                });
            var source = window.source + '';
            if (source.length > 0) {
                ymaps.geocode(window.order_city + ',' + window.source, {
                    results: 1
                }).then(function(res) {
                    var firstGeoObject = res.geoObjects.get(0);
                    if (firstGeoObject && firstGeoObject.length > 0) {
                        yandexMap.map.geoObjects.add(new ymaps.Placemark(firstGeoObject.geometry.getCoordinates(), {
                            balloonContentBody: 'Адрес посадки',
                            hintContent: 'Адрес посадки'
                        }, {
                            iconImageHref: '/bitrix/templates/taxi_yellow/i/ico-taxi.png',
                            iconImageSize: [41, 36]
                        }));
                    }
                });
            }
            if (window.order && parseInt(window.crew, 10) > 0)
                var fp = window.crew;
            else
                var fp = false;
            $(document).ready(function() {
                setTimeout(function() {
                    taxi.updateCarMarks(yandexMap);
                    $(document).trigger('taxi_map_afterInit');
                }, 2000);
            });
        }
        taxi.createCarCrewOrId = function(carInfo) {
            var carIdOrCrewInfo = '';
            if (carInfo.crewId) {
                carIdOrCrewInfo = carIdOrCrewInfo + 'Позывной: ' + carInfo.crewId + "<br />";
            }
            return carIdOrCrewInfo;
        };
        taxi.createYandexMapCarMark = function(carInfo) {
            var carNumberInfo = '';
            if (carInfo.number) {
                carNumberInfo = 'Гос.номер: ' + carInfo.number + '<br>';
            }
            var carProductionYear = '';
            if (carInfo.productionYear) {
                carProductionYear = 'Год выпуска: ' + carInfo.productionYear + '<br>';
            }
            var carIdOrCrewInfo = taxi.createCarCrewOrId(carInfo);
            carInfo.label = carInfo.description + ' ' + carInfo.color.toLowerCase() + ' ' + carNumberInfo + carIdOrCrewInfo + carProductionYear;
            if (carInfo.isFree) {
                if (carInfo.crewId && carInfo.id) {
                    carIdOrCrewInfo = carIdOrCrewInfo + "";
                }
                var carMark = new ymaps.Placemark([carInfo.lat, carInfo.lon], {
                    balloonContentBody: carInfo.description + carInfo.color.toLowerCase() + "</div>",
                    balloonContentFooter: carIdOrCrewInfo + carNumberInfo + carProductionYear,
                    hintContent: carInfo.description + " <em>" + carInfo.color.toLowerCase() + "</em>"
                }, {
                    iconImageHref: '/bitrix/templates/taxi_yellow/i/ico-taxi.png',
                    iconImageSize: [41, 36]
                });
            } else {
                var carMark = new ymaps.Placemark([carInfo.lat, carInfo.lon], {
                    hintContent: carInfo.description + " <em>" + carInfo.color.toLowerCase() + "</em>"
                }, {
                    iconImageHref: '/bitrix/templates/taxi_yellow/i/ico-taxi-red.png',
                    iconImageSize: [41, 36]
                });
            }
            carMark.crew_code = carInfo.id;
            carMark.label = carInfo.label;
            carMark.carId = carInfo.id;
            return carMark;
        };
        taxi.selectCar = function(carId, label, senderA) {
            $('#FIELD_AUTO').val('Хочу заказать машину: ' + label);
            $('#FIELD_AUTO_ID').val('' + carId);
            taxi.ordering.selectCustomCar(carId, label);
            if (senderA) {
                var oldOnClick = senderA.attr('onclick');
                var oldHtml = senderA.html();
                senderA.attr('onclick', 'return false;');
                senderA.html(' - Выбрано авто ' + label);
                setTimeout(function() {
                    senderA.attr('onclick', oldOnClick);
                    senderA.html(oldHtml);
                }, 1000);
            }
        };
        taxi._clearCarsOnMap = function() {
            if (!yandexMap.map) {
                return;
            }
            for (var carMark in yandexMap.carMarks) {
                if (yandexMap.carMarks[carMark] === null) {
                    continue;
                }
                yandexMap.map.geoObjects.remove(yandexMap.carMarks[carMark]);
            }
        };
        taxi._drawCarsOnMap = function(carsInfo) {
            if (!yandexMap.map) {
                return;
            }
            taxi._clearCarsOnMap();
            var marks = [];
            for (var key in carsInfo) {
                var carInfo = carsInfo[key];
                var carMark = taxi.createYandexMapCarMark(carInfo);
                marks[carInfo.id] = carMark;
                if (yandexMap && typeof(yandexMap) !== 'undefined') {
                    yandexMap.map.geoObjects.add(marks[carInfo.id]);
                }
            }
            yandexMap.carMarks = marks;
            taxi.startNextUpdateCarMarks();
        };
        taxi._addFromPointMark = function() {
            if (!yandexMap.map) {
                return;
            }
            var fromCoords = taxi.ordering.getFromPoint();
            if (fromCoords) {
                yandexMap.map.geoObjects.add(new ymaps.Placemark(fromCoords, {
                    balloonContentBody: 'Адрес посадки',
                    hintContent: 'Адрес посадки'
                }, {
                    iconImageHref: '/bitrix/templates/taxi_yellow/i/ico-taxi.png',
                    iconImageSize: [41, 36]
                }));
            }
        };
        taxi.updateCarMarks = function(yandexMap) {
            var method = new TaxiMethod();
            if (!taxi.ordering.isOnFinalState()) {
                method.tryCount = 1;
                method.name = 'findCars';
                method.successCallback = function(data) {
                    if (data[0]) {
                        taxi._drawCarsOnMap(data);
                    } else {
                        taxi.startNextUpdateCarMarks();
                    }
                };
            } else {
                taxi._addFromPointMark();
                method.name = 'getCarInfo';
                method.successCallback = function(carInfo) {
                    var data = [];
                    data.push(carInfo);
                    taxi._drawCarsOnMap(data);
                };
                method.params = {
                    carId: taxi.ordering.carId
                };
            }
            method.errorCallback = function() {
                taxi.startNextUpdateCarMarks();
            };
            taxi.taxiClient.executeQuery(method);
        };

        taxi.startNextUpdateCarMarks = function() {
            if (taxi.ordering.getUpdateCarsInterval() > 0) {
                setTimeout(function() {
                        taxi.updateCarMarks(yandexMap);
                    },
                    taxi.ordering.getUpdateCarsInterval());
            } else {
                setTimeout(function() {
                    taxi.startNextUpdateCarMarks();
                }, 3000);
            }
        };

        window.yandexMap = yandexMap;
        $(document).trigger('onTaxiLoad');
        return {
            name: 'yandex',
            init: function(params) {
                jQuery.extend(yandexMap, params);
                ymaps.ready(function() {
                    ymapsinit();
                });
            },
            createroute: function() {
                if (yandexMap.mypos) {
                    yandexMap.map.geoObjects.remove(yandexMap.mypos);
                }
                yandexMap.mypos = null;
                yandexMap.route = null;
                yandexMap.source_pos = null;

                if (!yandexMap.points[0] || typeof(yandexMap.points[0].length) === "number") {
                    return;
                }
                if (!yandexMap.points[1] || typeof(yandexMap.points[1].length) === "number" && yandexMap.points[0] || yandexMap.points[1].label === "Кишинёв" || yandexMap.points[1].label === "Chisinau") {
                    if (yandexMap.lastRoute) {
                        yandexMap.map.geoObjects.remove(yandexMap.lastRoute);
                    }
                    yandexMap.mypos = new ymaps.Placemark(yandexMap.points[0].point, {
                        iconContent: ""
                    }, {
                        draggable: true,
                        iconImageHref: '/bitrix/templates/taxi_yellow/i/A.png',
                        iconImageSize: [41, 36],
                    });
                    yandexMap.mypos.events.add('dragend', function() {
                        yandexMap.geocoder(yandexMap.mypos.geometry.getCoordinates(), 1, function(res) {
                            if (res) {
                                yandexMap.startpoint(res[0]);
                                yandexMap.points[0].point = yandexMap.mypos.geometry.getCoordinates();
                            }
                        });
                    });
                    yandexMap.map.geoObjects.add(yandexMap.mypos);
                    yandexMap.map.setCenter(yandexMap.points[0].point);
                    return;
                }
                var point = [];
                for (var i = 0, l = yandexMap.points.length; i < l; i++) {
                    point[i] = yandexMap.points[i].point;
                }
                ymaps.route(point, {
                    mapStateAutoApply: true
                }).then(function(router) {
                    if (yandexMap.lastRoute) {
                        yandexMap.map.geoObjects.remove(yandexMap.lastRoute);
                    }
                    yandexMap.route = router;
                    yandexMap.editor = yandexMap.route.editor;
                    yandexMap.path = yandexMap.route.path;
                    yandexMap.editor.start({
                        addWayPoints: false
                    });
                    var editpoint;
                    yandexMap.editor.events.add('routeupdate', function() {
                        if (yandexMap.route) {
                            yandexMap.routeinfo({
                                length: yandexMap.route.getLength(),
                                time: yandexMap.route.getJamsTime()
                            });
                        }
                    }).add('waypointdragstart', function(e) {
                        var waypoint = e.get('wayPoint');
                        editpoint = parseInt(waypoint.properties.get('iconContent'), 10) - 1;
                    }).add('waypointdragend', function(e) {
                        if (typeof(editpoint) === "number") {
                            var waypoint = e.get('wayPoint');
                            yandexMap.geocoder(waypoint.geometry.getCoordinates(), 1, function(res) {
                                if (res.length > 0) {
                                    switch (editpoint) {
                                        case 0:
                                            yandexMap.startpoint(res[0]);
                                            break;
                                        case 1:
                                            yandexMap.endpoint(res[0]);
                                            break;
                                    }
                                    taxi.wayPointsData[editpoint] = res[0].label;
                                } else {
                                    taxi.wayPointsData[editpoint] = editpoint + 1 + '';
                                    yandexMap.updateWayPointsText();
                                }
                            });
                        }
                    });
                    yandexMap.route.getPaths().options.set({
                        strokeColor: taxi.yandexRoutesStrokeColor,
                        opacity: taxi.yandexRoutesOpacity
                    });
                    yandexMap.editor.events.fire('routeupdate');
                    yandexMap.lastRoute = yandexMap.route;
                    yandexMap.map.geoObjects.add(yandexMap.route);
                    yandexMap.updateWayPointsText = function() {
                        yandexMap.route.getWayPoints().each(function(item, i) {
                            if (taxi.wayPointsData.length > i) {
                                var address = taxi.wayPointsData[i];
                            } else {
                                var address = '';
                            }
                            
                            if (i == 0) {
                                item.options.set('iconImageHref', '/bitrix/templates/taxi_yellow/i/A.png');
                                item.options.set('iconImageSize', [41, 36]);
                                var coordinates = item.geometry.getCoordinates();
                                var content = coordinates[0] + ", " + coordinates[1];
                                item.properties.set('balloonContentBody', '<p>' + address + '</p>' + '<span style="font-size: small">(' + content + ')</span>');
                                item.properties.set('iconContent', '');
                            }
                            if (i == 1) {
                                item.options.set('iconImageHref', '/bitrix/templates/taxi_yellow/i/B.png');
                                item.options.set('iconImageSize', [41, 36]);
                                var coordinates = new Array($('#districts option:selected').attr('data-lat'), $('#districts option:selected').attr('data-lon'));
                                var content = coordinates[0] + ", " + coordinates[1];
                                item.properties.set('balloonContentBody', '<p>' + address + '</p>' + '<span style="font-size: small">(' + content + ')</span>');
                                item.properties.set('iconContent', '');
                            }
                        });
                    };
                    yandexMap.updateWayPointsText();
                });
            },
            setPoints: function(points) {
                yandexMap.points = points;
                this.createroute();
            },
            mypos: function(loc, callback) {
                var pos = [loc.coords.latitude, loc.coords.longitude];
                yandexMap.geocoder(pos, 1, function(res) {
                    callback();
                    if (!res || res.length === 0 || res[0].length === 0) {
                        return;
                    }
                    yandexMap.startpoint(res[0]);
                    ymaps.getZoomRange('yandex#map', res[0].point).then(function(result) {
                        yandexMap.map.setZoom(result[1] - 1);
                    });
                });
            },
            mypos2: function(loc, callback) {
                var pos = [loc.coords.latitude, loc.coords.longitude];
                yandexMap.geocoder(pos, 1, function(res) {
                    callback();
                    if (!res || res.length === 0 || res[0].length === 0) {
                        return;
                    }
                    yandexMap.endpoint(res[0]);
                    ymaps.getZoomRange('yandex#map', res[0].point).then(function(result) {
                        yandexMap.map.setZoom(result[1] - 1);
                    });
                });
            }
        };
    });
});;



$(document).ready(function() {
    taxi.addMap('google', new function() {
        if (typeof(google) === "undefined" || google === null) {
            return;
        }
        var googleMap = this;
        googleMap.directionsService = null;
        googleMap.route = null;
        googleMap.mypos = null;
        return {
            name: 'google',
            init: function(params) {
                jQuery.extend(googleMap, params);
                googleMap.geocoder(googleMap.city, 1, function(res) {
                    var pos = res[0].point;
                    googleMap.map = new google.maps.Map(document.getElementById(googleMap.mapcontainer), {
                        zoom: 11,
                        center: new google.maps.LatLng(pos[0], pos[1]),
                        mapTypeId: google.maps.MapTypeId.ROADMAP
                    });
                });
                googleMap.directionsService = new google.maps.DirectionsService();
                googleMap.route = new google.maps.DirectionsRenderer({
                    draggable: false
                });
                googleMap.mypos = new google.maps.Marker();
            },
            createroute: function() {
                googleMap.route.setMap(null);
                googleMap.mypos.setMap(null);
                if (!googleMap.points[0] || typeof(googleMap.points[0].length) === "number") {
                    return;
                }
                if (!googleMap.points[1] || typeof(googleMap.points[1].length) === "number" && googleMap.points[0]) {
                    var pos = googleMap.points[0].point;
                    pos = new google.maps.LatLng(pos[0], pos[1]);
                    googleMap.mypos = new google.maps.Marker({
                        map: googleMap.map,
                        draggable: true,
                        position: pos
                    });
                    googleMap.mypos.setMap(googleMap.map);
                    googleMap.map.setCenter(pos);
                    google.maps.event.addListener(googleMap.mypos, "dragend", function() {
                        var point = googleMap.mypos.getPosition();
                        point = [point.lat(), point.lng()];
                        googleMap.geocoder(point, 1, function(res) {
                            if (res) {
                                googleMap.startpoint(res[0]);
                            }
                        });
                    });
                    return;
                }
                googleMap.route.setMap(googleMap.map);
                var start = googleMap.points[0].point;
                start = new google.maps.LatLng(start[0], start[1]);
                var end = googleMap.points[1].point;
                end = new google.maps.LatLng(end[0], end[1]);
                var request = {
                    origin: start,
                    destination: end,
                    travelMode: google.maps.TravelMode.DRIVING
                };
                googleMap.directionsService.route(request, function(result, status) {
                    if (status === google.maps.DirectionsStatus.OK) {
                        googleMap.route.setDirections(result);
                    }
                });
                google.maps.event.addListener(googleMap.route, 'directions_changed', function() {
                    var leg = googleMap.route.directions.routes[0].legs[0];
                    googleMap.routeinfo({
                        length: leg.distance.value,
                        time: leg.duration.value
                    });
                    return;
                });
            },
            setPoints: function(points) {
                googleMap.points = points;
                this.createroute();
            },
            mypos: function(loc, callback) {
                var pos = [loc.coords.latitude, loc.coords.longitude];
                googleMap.geocoder(pos, 1, function(res) {
                    callback();
                    if (!res) {
                        return;
                    }
                    googleMap.startpoint(res[0]);
                    var pos = res[0].point;
                    var latlng = new google.maps.LatLng(pos[0], pos[1]);
                    var maxZoomService = new google.maps.MaxZoomService();
                    maxZoomService.getMaxZoomAtLatLng(latlng, function(response) {
                        if (response.status === google.maps.MaxZoomStatus.OK) {
                            googleMap.map.setZoom(response.zoom - 3);
                        }
                    });
                    googleMap.map.setCenter(latlng);
                });
            }
        };
    });
});; //*/

//--------------------------------------------------------------------------------------------------------------------------------

taxi.addGeocoder('yandex', new function() {
    if (typeof(ymaps) === "undefined" || ymaps === null) {
        return;
    }
    return {
        name: 'yandex',
        find: function(find, limit, callback) {
            limit = limit || 1;
            pos1 = find.indexOf('аэропорт');
            pos2 = find.indexOf('Домодед');
            if ((pos1 !== -1) && (pos2 !== -1)) {
                find = 'Россия, Московская область, городской округ Домодедово, аэропорт Домодедово';
            }
            var geocodes = [];
            ymapsGeocoderOptions = {
                strictBounds: false,
                results: limit
            };
            ymaps.geocode(find, ymapsGeocoderOptions).then(function(res) {
                res.geoObjects.each(function(item) {
                    function internalFindLocality(item) {
                        var locality = false;
                        var searchLocalityIn = ['metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.SubAdministrativeArea.Locality', 'metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.AdministrativeAreaName.Locality', 'metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.SubAdministrativeArea.SubAdministrativeAreaName', 'metaDataProperty.GeocoderMetaData.AddressDetails.Country.AdministrativeArea.Locality', 'metaDataProperty.GeocoderMetaData.AddressDetails.Country.AddressLine', 'metaDataProperty.GeocoderMetaData.AddressDetails.Country.Locality', ];
                        var coordinates = item.geometry.getCoordinates();
                        var coordinatesString = coordinates[0] + ", " + coordinates[1];
                        for (var searchIndex in searchLocalityIn) {
                            locality = item.properties.get(searchLocalityIn[searchIndex]);
                            if (locality) {
                                if (typeof(locality) === 'string') {
                                    locality.LocalityName = locality;
                                    locality.PseudoStreet = coordinatesString;
                                }
                                return locality;
                            }
                        }
                        return locality;
                    }
                    var Locality = internalFindLocality(item);
                    if (!Locality) {
                        return;
                    }
                    var dependent = "";
                    var street = typeof(Locality) === 'string' ? Locality : "";
                    var house, housing;
                    house = housing = "";
                    var city = Locality.LocalityName || "";
                    if (Locality.Thoroughfare) {
                        street = Locality.Thoroughfare.ThoroughfareName || Locality.Thoroughfare.Premise.PremiseName || Locality.PseudoStreet;
                        if (Locality.Thoroughfare.Premise) {
                            if (Locality.Thoroughfare.Premise.PremiseNumber) {
                                house = Locality.Thoroughfare.Premise.PremiseNumber;
                                housing = house.match(/[к][0-9]+$/i);
                                if (housing !== null) {
                                    housing = housing[0].match(/[+0-9]+$/i)[0];
                                    house = house.match(/^[0-9\/]+/i)[0];
                                }
                            }
                        }
                    } else if (Locality.DependentLocality) {
                        if (Locality.DependentLocality.Thoroughfare) {
                            street = Locality.DependentLocality.Thoroughfare.ThoroughfareName;
                            if (Locality.DependentLocality.Thoroughfare.Premise) {
                                if (Locality.DependentLocality.Thoroughfare.Premise.PremiseNumber) {
                                    house = Locality.DependentLocality.Thoroughfare.Premise.PremiseNumber;
                                }
                            }
                        } else {
                            dependent = Locality.DependentLocality.DependentLocalityName;
                            street = dependent;
                        }
                    } else if (Locality.Premise) {
                        street = Locality.Premise.PremiseName;
                    }
                    var c = (city) ? city : "";
                    var d = (dependent) ? ", " + dependent : "";
                    var s = (street) ? ((city) ? ", " + street : street) : "";
                    var h = (house) ? " " + house : "";
                    var hs = (housing) ? " корпус " + housing : "";
                    var label = c + d + s + h + hs;
                    var value = street;
                    geocodes.push({
                        point: item.geometry.getCoordinates(),
                        street: street,
                        city: city,
                        label: label,
                        house: house,
                        housing: housing,
                        value: value
                    });
                });
                if (typeof(callback) === 'function') {
                    callback(geocodes);
                }
            }, function() {});
        }
    };
});



taxi.addGeocoder('google', new function() {
    if (typeof(google) === "undefined" || google === null) {
        return;
    }
    var geocoder = new google.maps.Geocoder();
    return {
        name: 'google',
        find: function(find, limit, callback) {
            limit = 10;
            if (typeof(find) === 'object') {
                find = {
                    'latLng': new google.maps.LatLng(find[0], find[1])
                };
            } else if (typeof(find) === 'string') {
                find = {
                    'address': find
                };
            }

            function getType(arr, type) {
                for (var i = arr.length - 1; i >= 0; i--) {
                    if (jQuery.inArray(type, arr[i].types) !== -1) {
                        return arr[i].long_name;
                    }
                }
                return "";
            }
            var geocodes = [];
            var param = {
                'region': 'ru'
            };
            jQuery.extend(param, find);
            geocoder.geocode(param, function(results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    jQuery.each(results, function(i, result) {
                        var city, street, dependent;
                        city = street = dependent = "";
                        var house, housing;
                        house = housing = "";
                        city = getType(result.address_components, 'locality');
                        street = getType(result.address_components, 'route');
                        if (!street) {
                            street = getType(result.address_components, 'point_of_interest');
                        }
                        if (!street) {
                            street = getType(result.address_components, 'establishment');
                        }
                        if (!street) {
                            dependent = getType(result.address_components, 'administrative_area_level_2');
                        }
                        house = getType(result.address_components, 'street_number');
                        housing = house.match(/[к][0-9]+$/i);
                        if (housing !== null) {
                            housing = housing[0].match(/[+0-9]+$/i)[0];
                            house = house.match(/^[0-9\/]+/i)[0];
                        }
                        var c = (city) ? city : "";
                        var d = (dependent) ? ", " + dependent : "";
                        var s = (street) ? ((city) ? ", " + street : street) : "";
                        var h = (house) ? " " + house : "";
                        var hs = (housing) ? " корпус " + housing : "";
                        var label = c + d + s + h + hs;
                        var value = street;
                        var loc = result.geometry.location;
                        geocodes.push({
                            point: [loc.lat(), loc.lng()],
                            city: city,
                            street: street,
                            label: label,
                            house: house,
                            housing: housing,
                            value: value
                        });
                    });
                    if (typeof(callback) === 'function') {
                        callback(geocodes);
                    }
                }
            });
        }
    };
});;



taxi.addGeocoder('google', new function() {
    if (typeof(google) === "undefined" || google === null) {
        return;
    }
    var geocoder = new google.maps.Geocoder();
    return {
        name: 'google',
        find: function(find, limit, callback) {
            limit = limit || 1;
            if (typeof(find) === 'object') {
                find = {
                    'latLng': new google.maps.LatLng(find[0], find[1])
                };
            } else if (typeof(find) === 'string') {
                find = {
                    'address': find
                };
            }

            function getType(arr, type) {
                for (var i = arr.length - 1; i >= 0; i--) {
                    if (jQuery.inArray(type, arr[i].types) !== -1) {
                        return arr[i].long_name;
                    }
                }
                return "";
            }
            var geocodes = [];
            var param = {
                'region': 'ru'
            };
            jQuery.extend(param, find);
            geocoder.geocode(param, function(results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    jQuery.each(results, function(i, result) {
                        var city, street, dependent;
                        city = street = dependent = "";
                        var house, housing;
                        house = housing = "";
                        city = getType(result.address_components, 'locality');
                        street = getType(result.address_components, 'route');
                        if (!street) {
                            street = getType(result.address_components, 'point_of_interest');
                        }
                        if (!street) {
                            street = getType(result.address_components, 'establishment');
                        }
                        if (!street) {
                            dependent = getType(result.address_components, 'administrative_area_level_2');
                        }
                        house = getType(result.address_components, 'street_number');
                        housing = house.match(/[к][0-9]+$/i);
                        if (housing !== null) {
                            housing = housing[0].match(/[+0-9]+$/i)[0];
                            house = house.match(/^[0-9\/]+/i)[0];
                        }
                        var c = (city) ? city : "";
                        var d = (dependent) ? ", " + dependent : "";
                        var s = (street) ? ((city) ? ", " + street : street) : "";
                        var h = (house) ? " " + house : "";
                        var hs = (housing) ? " корпус " + housing : "";
                        var label = c + d + s + h + hs;
                        var value = street;
                        var loc = result.geometry.location;
                        geocodes.push({
                            point: [loc.lat(), loc.lng()],
                            city: city,
                            street: street,
                            label: label,
                            house: house,
                            housing: housing,
                            value: value
                        });
                    });
                    if (typeof(callback) === 'function') {
                        callback(geocodes);
                    }
                }
            });
        }
    };
});;

//---------------------------------------------------------------------------------------------------------------------------------

var YandexSuggestCaller = function() {
    var self = this;
    self._lastResponse = null;
    self.callback = function() {};
    self.createResponseObject = function(data) {
        if (data.length < 3) {
            return false;
        }
        var variants = [];
        for (var index in data[1]) {
            var current = data[1][index];
            variants.push({
                type: current[0],
                label: current[1],
                fullLabel: current[2],
                systemData: current[3]
            });
        }
        var response = {
            part: data[0],
            variants: variants
        };
        return response;
    };
    window.function_Sj2dk83xZi450_callback = function(data) {
        var responseObject = self.createResponseObject(data);
        self._lastResponse = responseObject;
        self.callback(responseObject);
    };
    var SuggestCallerOptions = function() {
        return {
            callback: 'function_Sj2dk83xZi450_callback',
            part: '',
            lang: 'ru-RU',
            search_type: 'all',
            ll: '64.22769438476561,62.20712366243136',
            spn: '82.61718750000001,32.68027802373878',
            fullpath: '1',
            v: '5'
        };
    };
    self.optionsObject = new SuggestCallerOptions();
    self.internalGetRequest = function() {
        var optionsObject = self.optionsObject;
        if (optionsObject.part && optionsObject.part.length > 1) {
            var url = 'http://suggest-maps.yandex.ru/suggest-geo';
            $.ajax({
                url: url,
                type: 'get',
                data: optionsObject,
                dataType: 'jsonp',
                jsonp: "jsonp",
                crossDomain: true,
                success: function(response) {}
            });
        } else {
            return false;
        }
    };
    return {
        part: '',
        callback: function(responseObject) {},
        search_type: 'all',
        ll: '64.22769438476561,62.20712366243136',
        spn: '82.61718750000001,32.68027802373878',
        search: function(options, callback) {
            if (typeof(callback) !== 'function') {}
            this.part = options.long;
            this.callback = callback;
            self.callback = callback;
            self.optionsObject.part = this.part;
            self.optionsObject.search_type = this.search_type;
            self.optionsObject.ll = this.ll;
            self.optionsObject.spn = this.spn;
            return self.internalGetRequest();
        },
        getLastResponse: function() {
            return self._lastResponse;
        }
    };
};
taxi.yandexSuggest = new YandexSuggestCaller();
taxi.suggestCaller = taxi.yandexSuggest;;
var TaxiSuggestCaller = function() {
    var SuggestCallerOptions = function() {
        return {
            part: '',
            cityGeoCode: '',
            city: ''
        };
    };
    var self = {};
    self.disableApi = false;
    self._lastResponse = null;
    self.callback = function() {};
    self.optionsObject = new SuggestCallerOptions();
    self.createResponseObject = function(data) {
        var variants = [];
        for (var index in data) {
            var current = data[index];
            if (self.apiMethodName === 'findGeoObjects') {
                variants.push({
                    type: '',
                    label: current.label,
                    fullLabel: current.label,
                    geoData: current,
                    systemData: ''
                });
            } else {
                variants.push({
                    type: '',
                    label: current,
                    fullLabel: current,
                    systemData: ''
                });
            }
        }
        var response = {
            part: data[0],
            variants: variants
        };
        return response;
    };
    self.apiMethodName = 'findStreets';
    self.maxLimit = 500;
    self.internalGetRequest = function() {
        var optionsObject = self.optionsObject;
        if (optionsObject.part && optionsObject.part.length > 1) {
            if (self.disableApi) {
                taxi.yandexSuggest.search(self.options, self.callback);
                return false;
            }
            var query = new TaxiMethod(self.apiMethodName);
            query.params = {
                streetPart: optionsObject.part,
                maxLimit: self.maxLimit,
                city: optionsObject.city
            };
            query.successCallback = function(response) {
                var responseObject = self.createResponseObject(response);
                self._lastResponse = responseObject;
                if (responseObject.variants.length === 0) {
                    taxi.yandexSuggest.search(self.options, self.callback);
                    return;
                }
                self.callback(responseObject);
            };
            query.errorCallback = function() {
                taxi.yandexSuggest.search(self.options, self.callback);
            };
            taxi.taxiClient.executeQuery(query);
        } else {
            return false;
        }
    };
    return {
        part: '',
        ajaxUrl: '/include/otaxi/ajax_otaxi_get_streets.php',
        city: '',
        cityGeoCode: '',
        setMaxLimit: function(maxLimit) {
            self.maxLimit = maxLimit;
        },
        callback: function(responseObject) {},
        search: function(options, callback) {
            if (typeof(callback) !== 'function') {}
            this.part = options.short;
            this.callback = callback;
            self.callback = callback;
            self.options = options;
            self.optionsObject.city = this.city;
            self.optionsObject.part = this.part;
            self.optionsObject.cityGeoCode = this.cityGeoCode;
            self.optionsObject.ajaxUrl = this.ajaxUrl;
            return self.internalGetRequest();
        },
        disableApi: function() {
            self.disableApi = true;
        },
        setApiMethodName: function(apiMethodName) {
            if (apiMethodName === 'findStreets' || apiMethodName === 'findGeoObjects') {
                self.apiMethodName = apiMethodName;
            } else {
                var message = "Wrong api method name for taxiSuggestCaller! : " + apiMethodName;
                throw message;
            }
        },
        getLastResponse: function() {
            return self._lastResponse;
        }
    };
};;
(function(factory) {
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else {
        factory(jQuery);
    }
}(function($) {
    var pluses = /\+/g;

    function encode(s) {
        return config.raw ? s : encodeURIComponent(s);
    }

    function decode(s) {
        return config.raw ? s : decodeURIComponent(s);
    }

    function stringifyCookieValue(value) {
        return encode(config.json ? JSON.stringify(value) : String(value));
    }

    function parseCookieValue(s) {
        if (s.indexOf('"') === 0) {
            s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
        }
        try {
            s = decodeURIComponent(s.replace(pluses, ' '));
        } catch (e) {
            return;
        }
        try {
            return config.json ? JSON.parse(s) : s;
        } catch (e) {}
    }

    function read(s, converter) {
        var value = config.raw ? s : parseCookieValue(s);
        return $.isFunction(converter) ? converter(value) : value;
    }
    var config = $.cookie = function(key, value, options) {
        if (value !== undefined && !$.isFunction(value)) {
            options = $.extend({}, config.defaults, options);
            if (typeof options.expires === 'number') {
                var days = options.expires,
                    t = options.expires = new Date();
                t.setDate(t.getDate() + days);
            }
            return (document.cookie = [encode(key), '=', stringifyCookieValue(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join(''));
        }
        var result = key ? undefined : {};
        var cookies = document.cookie ? document.cookie.split('; ') : [];
        for (var i = 0, l = cookies.length; i < l; i++) {
            var parts = cookies[i].split('=');
            var name = decode(parts.shift());
            var cookie = parts.join('=');
            if (key && key === name) {
                result = read(cookie, value);
                break;
            }
            if (!key && (cookie = read(cookie)) !== undefined) {
                result[name] = cookie;
            }
        }
        return result;
    };
    config.defaults = {};
    $.removeCookie = function(key, options) {
        if ($.cookie(key) !== undefined) {
            $.cookie(key, '', $.extend({}, options, {
                expires: -1
            }));
            return true;
        }
        return false;
    };
}));
jQuery(document).ready(function($) {
    if ($.cookie('top-panel-closed') == 1) {
        $('#top-panel').removeClass('opened');
    }

    function animateShowHideTopPanel(_this) {
        function animateClose(_this) {
            _this.stop();
            _this.animate({
                'margin-top': "-" + _this.height()
            }, 'slow', function() {
                _this.removeClass('opened');
                $.cookie('top-panel-closed', 1, {
                    path: '/'
                });
            });
        }

        function animateShow(_this) {
            _this.stop();
            _this.animate({
                'margin-top': '0'
            }, 'slow', function() {
                _this.addClass('opened');
                $.cookie('top-panel-closed', 0, {
                    path: '/'
                });
            });
        }
        if (_this.hasClass('opened')) {
            animateClose(_this);
        } else {
            animateShow(_this);
        }
    }
    $('.close-app, .top_border, .open-app').click(function(event) {
        event.stopPropagation();
        event.preventDefault();
        animateShowHideTopPanel($('#top-panel'));
    });
});;

function select_city(e) {
    $.colorbox.close();
    location.reload();
}

function preloader(images, callback) {
    var length = images.length;
    var count = 0;
    $.each(images, function(i, src) {
        var image = new Image();
        image.src = src;
        image.onload = function() {
            count++;
            if (count >= length) {
                callback();
            }
        };
    });
};

function get_max_height(elements) {
    var max = 0;
    $(elements).css({
        "height": "auto"
    });
    elements.each(function(i, element) {
        if (max < $(element).height()) {
            max = $(element).height();
        }
    });
    return max;
}
(function($) {
    $.fn.extend({
        transition: function(prop, val) {
            var prefix = ['-webkit-', '-moz-', '-o-', 'o-', ''];
            $(this).each(function() {
                var self = $(this);
                for (var i = prefix.length - 1, pref; i >= 0; i--) {
                    self.css(prefix[i] + 'transition' + prop, val);
                };
            });
            return $(this);
        }
    });
})(jQuery);
jQuery(document).ready(function($) {

    /*$('.colorboxEnterCode').colorbox({width:'90%',maxWidth:562,autoScale:true,autoDimensions:true,onComplete:function(){$('#cboxClose').hide();$(window).off('resize.colorboxEnterCode');$(window).on('resize.colorboxEnterCode',function(){$.colorbox.resize({width:($(window).width()<562)?'90%':562});}).trigger('resize.colorboxEnterCode');}});*/

    $("#FIELD_TEL").mask("+ 7 (999) 999 99 99");
    if ($('.detailed-order-taxi-wrapper').length) {
        $('.sprite.date').on('click', function(event) {
            $('img.calendar-icon').click();
            event.preventDefault();
        });
    }
    $('.control-group:has(label[for=FIELD_DATA]) input, .order-taxi-when-date input').on('keydown', function(event) {
        if (event.keyCode > 48) {
            event.stopPropagation();
            event.preventDefault();
        }
    });
    $('#select_client').on('change', function() {
        var service = $('#select_client option:selected').data('client');
        var id = $('#select_client option:selected').data('id');
        $.post('/include/ajax_name_service.php', {
            service_name: service,
            service_id: id
        }, function(data, textStatus) {
            if (textStatus === 'success') {
                location.reload();
            }
        });
    });
    $('.control-group:has(label[for=FIELD_DATA]) input, .order-taxi-when-date input').on('click', function(event) {
        var _this = $(this);
        if (_this.is('.order-taxi-when-date input')) {
            _this.closest('div').find('img.calendar-icon').click();
        } else {
            _this.closest('.controls').find('img.calendar-icon').click();
        }
    });

    $('.control-group:has(label[for=FIELD_DATA]) input, .order-taxi-when-date input').on('change', function() {
        taxi.updateRoute(true);
        taxi.updateRoute(false);
    });
    $('#select_client').on('change', function() {
        var service = $('#select_client option:selected').data('client');
        var id = $('#select_client option:selected').data('id');
        $.post('/include/ajax_name_service.php', {
                service_name: service,
                service_id: id
            },
            function(data, textStatus) {
                if (textStatus == 'success') {
                    location.reload();
                }
            });
    });

    $('.pokazat a').on('click', function() {
        $("#map").toggleClass('active');
    });
    $('#myTab a').on('click', function() {
        if ($(this).attr('href') == '#quick')
            $('.no_quickly').css('display', 'none');
        else
            $('.no_quickly').css('display', 'block');
    });
    $('.form_stars li').on('click', function() {
        $('.form_stars .star').removeClass('active');
        $(this).addClass('active');
        $('#rating_value').val($(this).index() + 1);
    });
    if (!$('.detailed-order-taxi-wrapper').length) {
        var button = $('button[name=iblock_submit]');
        var submit = $('input[name=iblock_submit]');
        $("#submit_anketa").toggle();
        button.on('click', function() {
            submit.click();
        });
    }
    $('.colorbox_form').colorbox({
        width: '90%',
        maxWidth: 562,
        height: 385,
        autoScale: true,
        autoDimensions: true,
        onComplete: function() {
            $('#cboxClose').hide();
            $(window).off('resize.colorbox_form');
            $(window).on('resize.colorbox_form', function() {}).trigger('resize.colorbox_form');
        }
    });
    var images = [];
    var thumbs = $(".thumbnails .thumbnail");
    thumbs.find("img").each(function(indx, element) {
        images.push($(this).attr('src'));
    });
    preloader(images, function() {
        thumbs.transition('-duration', '0s').css({
            "height": get_max_height(thumbs)
        });
    });
    $(window).on('resize', function() {
        thumbs.css({
            "height": get_max_height(thumbs)
        });
    });
    var maks = 0;
    $(".in .serv").each(function(indx, element) {
        if (maks < $(element).height()) {
            maks = $(element).height();
        }
    });
    $(".in .serv").height(maks);
});;
taxi.taxiClient = new TaxiClient();
taxi.suggestCaller = new TaxiSuggestCaller();
taxi.ordering = new TaxiBitrixOrderProcess(taxi.taxiClient);
taxi.cost = new TaxiCost;
taxi.lastCostfromApi = "";
taxi._disableAdapters = false;
taxi.disableAdpaters = function() {
    taxi._disableAdapters = true;
    taxi.suggestCaller.disableApi();
    taxi.ordering.disable();
    taxi.taxiClient.enabled = false;
};
taxi.enableAddingCostInOrderComment = function() {
    taxi.ordering._oldCreateOrderQuery = taxi.ordering.createOrderQuery;
    taxi.ordering.createOrderQuery = function() {
        var createOrderData = taxi.ordering._oldCreateOrderQuery();
        if (taxi.routesInfoLayout.cost > 0) {
            createOrderData.comment += ' Стоимость с сайта: ' + taxi.routesInfoLayout.cost + ' lei';
        }
        return createOrderData;
    };
};
taxi.disableRoutes = function() {
    taxi.routeInfoFunction = function() {};
    taxi.yandexRoutesOpacity = 0.0;
};
taxi.routeInfoFunction = function(res) {
    var len = res.length;
    var time = res.time;
    var timeLine = '';
    if (time + 1 < 1000 * 60) {
        timeLine = '<p>С учетом пробок ' + Math.round(time / 60) + ' мин.</p>';
    }
    if (len > 0) {
        $('#list').attr('route-length', Math.round(len));
    }
    if (Math.round(time / 60) > 0) {
        $('#list').attr('route-timeLine', Math.round(time / 60));
    }
    var routeData = new TaxiCostRouteData();
    routeData.len = len;
    routeData.timeInMinutes = Math.round(time / 60);
    routeData.rawFrom = '';
    routeData.rawTo = '';
    if (taxi.ordering.useNewTemplate()) {
        routeData.priorTime = $('.order-taxi-when-date input').val();
    } else {
        routeData.priorTime = $('label[for=FIELD_DATA] ~ .controls input').val();
    }
    var cost = taxi.cost.callCost(routeData);
};
taxi.routesInfoLayout = {
    _config: {
        cost: ['.order-taxi-data span:has(.price)', 'strong', ' &#8399;', 'cost'],
        distance: ['.order-taxi-data span:has(.distance)', 'strong', ' км', 'distance'],
        time: ['.order-taxi-data span:has(.time)', 'strong', ' мин.', 'time']
    },
    _checkRange: function(value) {
        return value >= 1 && value < 10000;
    },
    _setContol: function(_configLine, value) {
        var baseControl = $(_configLine[0]);
        if (baseControl.length > 0) {
            if (value.length === 0 || !this._checkRange(value)) {
                baseControl.hide().find(_configLine[1]).html('');
            } else {
                baseControl.show().find(_configLine[1]).html(value + _configLine[2]);
                this[_configLine[3]] = value;
            }
        }
    },
    distance: null,
    time: null,
    cost: null,
    setDistance: function(distance) {
        this._setContol(this._config.distance, distance);
    },
    setTime: function(time) {
        this._setContol(this._config.time, time);
    },
    setCost: function(cost) {
        this._setContol(this._config.cost, cost);
    },
    hideAll: function() {
        this.setCost(0);
        this.setDistance(0);
        this.setTime(0);
    }
};
taxi.newRouteInfoFunction = function(res) {
    var length = res.length;
    var time = res.time;
    if (length > 0) {
        $('#list').attr('route-length', Math.round(length));
    }
    if (time > 0) {
        $('#list').attr('route-timeLine', Math.round(time));
    }
    var cost = taxi.callCost(length, time);
    var info = {};
    info.cost = Math.round(cost);
    info.distance = Math.round(length / 1000);
    info.time = Math.round(time / 60);
    taxi.routesInfoLayout.setCost(info.cost);
    taxi.routesInfoLayout.setDistance(info.distance);
    taxi.routesInfoLayout.setTime(info.time);
};

jQuery(document).ready(function($) {
    taxi.routesInfoLayout.hideAll();
    if (taxi.ordering.useNewTemplate()) {
        taxi.routeInfoFunction = taxi.newRouteInfoFunction;
    };
    $('#reject_order').on('click', function(event) {
        event.stopPropagation();
        event.preventDefault();
        var _this = $(this);
        if (_this.hasClass('active') && confirm('Вы действительно хотите отменить заказ?')) {
            if (taxi.ordering.orderId) {
                taxi.ordering.rejectOrder();
            }
        }
    });

    $('#new_order').on('click', function(event) {
        event.stopPropagation();
        event.preventDefault();
        taxi.ordering.onNewOrder();
        if (taxi.ordering.useNewTemplate()) {
            window.location.href = '/order/';
        } else {
            window.location.href = '/';
        }
    });

    $('#send_order_form').click('click', function(event) {
        $('.errortext').remove();
        if (!taxi._disableAdapters) {
            var _this = $(this);
            if (!_this.hasClass('stopOrderProccess')) {
                event.stopPropagation();
                event.preventDefault();
                taxi.ordering.onSubmitOrderForm();
            }
        };
    });

    $.widget("ThreeColors.geo_autocomplete", {
        _init: function() {
            this.options._cache = {};
            this.element.autocomplete(this.options)._renderItem = function(_ul, _item) {
                return $('<li></li>').data('item.autocomplete', _item).append(this.options.getItemHTML(_item)).appendTo(_ul);
            };
        },
        options: {
            minLength: 3,
            delay: 300,
            inputType: 'street',
            source: function(_request, _responseCallback) {
                var city = this.options.city.val() || window.city;
                var cityId = 0;
                if (parseInt(city) > 0) {
                    var cityId = city;
                    var city = this.options.city.find('option:selected').text();
                }
                var house = this.options.house.val() || "";
                var housing = this.options.housing.val() || "";
                var createTerm = function(obj) {
                    var res = _request.term;
                    if (obj.options.inputType === 'street' && city.length > 0) {
                        res = city + ", " + res;
                    } else if (obj.options.inputType === 'locality') {
                        res = 'Россия, ' + res;
                    } else if (obj.options.inputType === 'city') {
                        res = 'Россия, город' + res;
                    }
                    return res;
                };
                var self = this;
                var _address = _request.term;
                var fullAddress = createTerm(this);
                taxi.suggestCaller.city = city;
                taxi.suggestCaller.search({
                        short: _address,
                        long: fullAddress
                    },
                    function(responseObject) {
                        if (!responseObject) {
                            return;
                        }
                        self.options._cache[_request.term] = responseObject.variants;
                        _responseCallback(responseObject.variants);
                    }
                );
            },
            getItemHTML: function(_item) {
                return _item.label.replace(/,/gi, ',<br/>');
            }
        }
    });

    $(' #FIELD_CITY_OTKUDA, #FIELD_CITY_KUDA,#FIELD_FROM, #FIELD_FROM_HOUSE, #FIELD_FROM_HOUSING,#FIELD_TO, #FIELD_TO_HOUSE, #FIELD_TO_HOUSING').keypress(function(event) {
        var _this = $(this);
        var lockTime = 1000;
        var isFromControl = _this.closest('.order-taxi-whence').length > 0 || _this.closest('.CITY_OTKUDA-group').length > 0 || _this.closest('.FROM_HOUSE-group').length > 0;
        if (event.keyCode === 13) {
            event.stopPropagation();
            event.preventDefault();
            taxi.updateRoute(isFromControl);
        } else {
            _this.data('locked', true);
            _this.data('pushed', true);

            function runAutoUpdate(sender) {
                setTimeout(function() {
                    if (sender.data('pushed') && !sender.data('locked')) {
                        taxi.updateRoute(isFromControl);
                        sender.data('pushed', false);
                        sender.data('locked', false);
                    } else if (sender.data('pushed') && sender.data('locked')) {
                        sender.data('locked', false);
                        runAutoUpdate(sender);
                    }
                }, lockTime);
            }
            taxi.ordering.components.route.resetHotNeedUpdate(isFromControl);
            runAutoUpdate(_this);
        }
    });
    $('#FIELD_CITY_OTKUDA option, #FIELD_CITY_KUDA option').on('click', function(event) {
        var city = $(this).text();
        var _this = $(this);
        var isFromControl = _this.is('#FIELD_CITY_OTKUDA option');
        taxi.updateRoute(isFromControl);
    });

    $("#map").each(function() {
        var inputFromStreet = $("#FIELD_ADDRESS");
        //var inputFromStreet = $("#FIELD_FROM");
        var inputFromHouse = $("#FIELD_FROM_HOUSE");
        var inputFromHousing = $("#FIELD_FROM_HOUSING");
        var inputFromCity = $('#FIELD_CITY_OTKUDA');
        var FROM_HOUSE = $(".FROM_HOUSE-group");
        var inputToStreet = $("#FIELD_ADDRESS_TO");
        var inputToHouse = $("#FIELD_TO_HOUSE");
        var inputToHousing = $("#FIELD_TO_HOUSING");
        var inputToCity = $('#FIELD_CITY_KUDA');
        var TO_HOUSE = $(".TO_HOUSE-group");
        taxi.onDragEnd = function(geoPoint, isFromPoint) {
            if (!geoPoint) {
                return;
            }

            function _fixGeoObject(geoObject) {
                if (geoObject.street === geoObject.value && geoObject.city === "") {
                    var s = geoObject.value;
                    var m = s.match(/,(([^,]*улица|проспект|проезд|переулок|площадь)[^,]*)(,(.*)|(.*))$/i);
                    if (m) {
                        if (m[1]) {
                            geoObject.street = m[1].trim();
                        }
                        if (m[4]) {
                            geoObject.house = m[4].trim().replace(/^,/, '');
                        }
                    }
                }
            }
            _fixGeoObject(geoPoint);
            if (isFromPoint) {
                taxi.ordering.fromLat = geoPoint.point[0];
                taxi.ordering.fromLon = geoPoint.point[1];
            } else {
                //taxi.ordering.toLat = geoPoint.point[0];
                //taxi.ordering.toLon = geoPoint.point[1];
                taxi.ordering.toLat=$('#districts option:selected').attr('data-lat');
                taxi.ordering.toLon=$('#districts option:selected').attr('data-lon');
            }
        };

        function getCityRow(res) {
            if (typeof(res.city) !== 'undefined' && res.city !== null && res.city !== window.city) {
                var city = res.city;
            } else {
                var city = window.city;
            }
            return (city) ? city : '';
        }

        function startInputSetValues(res, ignore) {
            taxi.onDragEnd(res, true);
            if (!res)
                return;
            ignore = ignore || '';
            if (!res.changed) {
                res.value = res.street;
                res.changed = true;
            }
            if (ignore.indexOf('value') < 0) {
                inputFromStreet.val(res.value);
            }
            if (ignore.indexOf('city') < 0) {
                inputFromCity.val(res.city);
            }
            if (ignore.indexOf('house') < 0) {
                inputFromHouse.val(res.house);
            }
            if (ignore.indexOf('housing') < 0) {
                inputFromHousing.val(res.housing);
            }
            return res;
        }

        function endInputSetValues(res, ignore) {
            taxi.onDragEnd(res, false);
            if (!res)
                return;
            ignore = ignore || '';
            if (!res.changed) {
                res.value = res.street;
                res.changed = true;
            }
            if (ignore.indexOf('value') < 0) {
                inputToStreet.val(res.value);
            }
            if (ignore.indexOf('city') < 0) {
                inputToCity.val(res.city);
            }
            if (ignore.indexOf('house') < 0) {
                inputToHouse.val(res.house);
            }
            if (ignore.indexOf('housing') < 0) {
                inputToHousing.val(res.housing);
            }
            return res;
        }

        function writeDefaultCity() {
            if (!inputFromStreet.val()) {
                inputFromCity.val(window.city);
            } else {
                FROM_HOUSE.show();
            }
            if (!inputToStreet.val()) {
                inputToCity.val(window.city);
            } else {
                TO_HOUSE.show();
            }
        }

        function initTaxiMapObjects() {
            taxi.afterCallCost = function(cost) {
                return cost;
            };
            taxi.callCost = function(length, time) {
                var mileage = $('#tariff_travel option:selected').data('mileage');
                var landing = $('#tariff_travel option:selected').data('landing');
                var included = $('#tariff_travel option:selected').data('included');
                var minpricecity = $('#tariff_travel option:selected').data('minpricecity');
                var typetariff = $('#tariff_travel option:selected').data('typetariff');
                var cost = 0;
                $('.dop_input:checked').each(function() {
                    dop_cost += Math.round($(this).data('cost'));
                });
                if (typetariff == '0' || typetariff == '' || typetariff == undefined) {
                    if ((length / 1000) > included) {
                        cost = landing + (length / 1000 - included) * mileage;
                    } else {
                        cost = landing;
                    }
                    if (minpricecity > cost) {
                        cost = minpricecity;
                    }
                } else if (typetariff == '1') {
                    if (time > included) {
                        cost = landing + (time - included) * mileage;
                    } else {
                        cost = landing;
                    }
                    if (minpricecity > cost) {
                        cost = minpricecity;
                    }
                }
                var finalCost = Math.round(cost);
                finalCost = taxi.afterCallCost(finalCost);
                taxi.routesInfoLayout.cost = finalCost;
                return finalCost;
            };
            taxi.init({
                mapcontainer: "map",
                map: window.geoservice,
                googlemaptoken: '',
                geocoder: window.geoservice,
                city: window.city,
                startInput: startInputSetValues,
                endInput: endInputSetValues,
                region: 'ru',
                routeinfo: function(res) {
                    taxi.routeInfoFunction(res);
                }
            });
            $('#tariff_travel').on('change', function() {
                var routeLength = $('#list').attr('route-length');
                var routeTimeLine = $('#list').attr('route-timeLine');
                if (routeLength > 0) {
                    var cost = taxi.callCost(routeLength, routeTimeLine);
                    $('#cost_order').text(cost);
                }
            });
            $('.dop_input').on('change', function() {
                var cost = parseInt($('#cost_order').text());
                if ($(this).is(':checked'))
                    $('#cost_order').text(cost + Math.round($(this).data('cost')));
                else
                    $('#cost_order').text(cost - Math.round($(this).data('cost')));
            });
        }


        function initCityAutoFill() {
            $.each([inputFromCity, inputToCity], function() {
                $(this).on('blur', function() {
                    var _this = $(this);
                    if ($.trim(_this.val()).length === 0) {
                        _this.val(window.city);
                    }
                });
            });
        }

        function initFindMyGeoLocation() {
            if (geo_position_js.init()) {
                var findme = $('#find-me');
                var findme2 = $('#find-me2');
                peloader = $("<img>").attr("src", "/preloader.gif").css({
                    "margin": "7px 5px 0 -24px",
                    "float": "right"
                });
                peloader2 = $("<img>").attr("src", "/preloader.gif").css({
                    "margin": "7px 5px 0 -24px",
                    "float": "right"
                });
                findme.html('<div class="back target" id="back_target"></div>').css({
                    "cursor": "pointer",
                    "color": "#08c"
                }).before(peloader.hide()).on('click', function(e) {
                    findme.hide();
                    e.preventDefault();
                    peloader.show();
                    FROM_HOUSE.show();
                    geo_position_js.getCurrentPosition(function(res) {
                        taxi.mypos(res, function() {
                            peloader.hide();
                            findme.show();
                        });
                    }, function() {});
                });
                findme2.html('<div class="back target" id="back_target2"></div>').css({
                    "cursor": "pointer",
                    "color": "#08c"
                }).before(peloader2.hide()).on('click', function(e) {
                    findme2.hide();
                    e.preventDefault();
                    peloader2.show();
                    TO_HOUSE.show();
                    geo_position_js.getCurrentPosition(function(res) {
                        taxi.mypos2(res, function() {
                            peloader2.hide();
                            findme2.show();
                        });
                    }, function() {});
                });
            }
        }
        initTaxiMapObjects();
        writeDefaultCity();
        initCityAutoFill();
        initFindMyGeoLocation();

        function initAutoComplete(autoCompleteOptions) {
            autoCompleteOptions.streetInput.geo_autocomplete({
                city: autoCompleteOptions.cityInput,
                house: autoCompleteOptions.houseInput,
                housing: autoCompleteOptions.housingInput,
                inputType: 'street',
                select: function(event, ui) {

                    if (autoCompleteOptions.hiddenControls == 'FROM_HOUSE') {
                        $('#FIELD_FROM_LAT').val(ui.item.geoData.address.location[0] + "");
                        $('#FIELD_FROM_LON').val(ui.item.geoData.address.location[1] + "");
                        $('#FIELD_CITY_OTKUDA').val(ui.item.geoData.address.city + "");
                        $('#FIELD_FROM_HOUSE').val(ui.item.geoData.address.house + "");
                        $('#FIELD_FROM').val(ui.item.geoData.address.street + "");
                    } else {
                        $('#FIELD_TO_LAT').val(ui.item.geoData.address.location[0] + "");
                        $('#FIELD_TO_LON').val(ui.item.geoData.address.location[1] + "");
                        $('#FIELD_CITY_KUDA').val(ui.item.geoData.address.city + "");
                        $('#FIELD_TO_HOUSE').val(ui.item.geoData.address.house + "");
                        $('#FIELD_TO').val(ui.item.geoData.address.street + "");
                    }

                    var isFromControl = (autoCompleteOptions.wayPointIndex === 0);
                    if (typeof(ui.item.geoData) !== 'undefined' && typeof(ui.item.geoData.address.location) !== 'undefined' && ui.item.geoData.address.location) {
                        var geoData = ui.item.geoData;
                        var geoData = ui.item.geoData;
                        taxi.ordering.components.route.onGeoObjectSelect(geoData, isFromControl);
                        if (typeof(geoData) !== 'undefined') {
                            if (typeof(geoData.address) !== 'undefined') {
                                if (typeof(geoData.address.house) !== 'undefined') {
                                    var house = geoData.address.house;
                                    if (house !== '') {
                                        if (autoCompleteOptions.hiddenControls == 'FROM_HOUSE') {
                                            $('#FIELD_FROM_HOUSE').val(house);
                                        } else {
                                            $('#FIELD_TO_HOUSE').val(house);
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        taxi.ordering.components.route.resetHotNeedUpdate(isFromControl);
                    }
                },
                close: function(event, ui) {
                    var isFromControl = (autoCompleteOptions.wayPointIndex === 0);
                    taxi.updateRoute(isFromControl);
                    /*var old = autoCompleteOptions.streetInput.val() + "";
                    old = old.replace(/,.*$/g, '');*/
                    //autoCompleteOptions.streetInput.val(old);
                }
            }).on('focus', function() {
                autoCompleteOptions.hiddenControls.show();
            }).on('blur', function() {
                if (!$(this).val()) {
                    autoCompleteOptions.taxiSetPointFunction(null);
                    autoCompleteOptions.hiddenControls.hide().find('input').each(function() {
                        $(this).val('');
                    });
                } else {
                    autoCompleteOptions.hiddenControls.show();
                }
            });
            var currentUpdateFunction = function() {
                var city = autoCompleteOptions.cityInput.val() || window.city;
                if (parseInt(city) > 0) {
                    city = autoCompleteOptions.cityInput.find('option:selected').text();
                }
                var _address = city + ", " + autoCompleteOptions.streetInput.val() + ", " + autoCompleteOptions.houseInput.val() + ((autoCompleteOptions.housingInput.val()) ? " к " + autoCompleteOptions.housingInput.val() : "");
                var isFrom = autoCompleteOptions.wayPointIndex === 0;
                if (!taxi.ordering.components.route.hotNeedUpdate(isFrom)) {
                    taxi.geocoder(_address, 1, function(res) {
                        if (res.length === 0 || (!res[0].street && !res[0].city)) {
                            return;
                        }
                        /*if(res[0].city.toUpperCase()!=city.toUpperCase()){
                        		return;
                        }//*/
                        if (res[0].street != '' || res[0].house != '') {
                            taxi.wayPointsData[autoCompleteOptions.wayPointIndex] = res[0].label;
                            autoCompleteOptions.taxiSetPointFunction(res[0], 'value,city,house,housing');
                        }
                    });
                } else {
                    var point = taxi.ordering.components.route.createTaxiRoutePoint(isFrom);
                    autoCompleteOptions.taxiSetPointFunction(point, 'value,city,house,housing');
                }
            };

            $.each([autoCompleteOptions.houseInput, autoCompleteOptions.housingInput], function() {
                $(this).on('focus', function() {
                    $(this).data('val', $(this).val());
                }).on('blur', function() {
                    autoCompleteOptions.houseInput.val(autoCompleteOptions.houseInput.val().replace("a", "а").replace("b", "б"));
                });
            });

            var res = {
                updateFunction: currentUpdateFunction
            };
            return res;
        }

        var tmp = initAutoComplete({
            hiddenControls: FROM_HOUSE,
            streetInput: inputFromStreet,
            cityInput: inputFromCity,
            houseInput: inputFromHouse,
            housingInput: inputFromHousing,
            taxiSetPointFunction: taxi.startpoint,
            wayPointIndex: 0
        });
        taxi.updateFromFunction = tmp.updateFunction;
        var tmp = initAutoComplete({
            hiddenControls: TO_HOUSE,
            streetInput: inputToStreet,
            cityInput: inputToCity,
            houseInput: inputToHouse,
            housingInput: inputToHousing,
            taxiSetPointFunction: taxi.endpoint,
            wayPointIndex: 1
        });
        taxi.updateToFunction = tmp.updateFunction;

        taxi.updateRoute = function(isFromControl) {
            if (typeof(isFromControl) === 'undefined') {
                taxi.updateFromFunction();
                
                taxi.updateToFunction();
            } else {
                if (isFromControl) {
                    taxi.updateFromFunction();
                } else {
                    taxi.updateToFunction();
                }
            }
        };

    });
});;

function mpSetter() {};
(function(e, t, i) {
    function o(i, o, n) {
        var r = t.createElement(i);
        return o && (r.id = Z + o), n && (r.style.cssText = n), e(r)
    }

    function n() {
        return i.innerHeight ? i.innerHeight : e(i).height()
    }

    function r(e) {
        var t = k.length,
            i = (O + e) % t;
        return 0 > i ? t + i : i
    }

    function h(e, t) {
        return Math.round((/%/.test(e) ? ("x" === t ? E.width() : n()) / 100 : 1) * parseInt(e, 10))
    }

    function l(e, t) {
        return e.photo || e.photoRegex.test(t)
    }

    function s(e, t) {
        return e.retinaUrl && i.devicePixelRatio > 1 ? t.replace(e.photoRegex, e.retinaSuffix) : t
    }

    function a(e) {
        "contains" in g[0] && !g[0].contains(e.target) && (e.stopPropagation(), g.focus())
    }

    function d() {
        var t, i = e.data(A, Y);
        null == i ? (_ = e.extend({}, V), console && console.log && console.log("Error: cboxElement missing settings object")) : _ = e.extend({}, i);
        for (t in _) e.isFunction(_[t]) && "on" !== t.slice(0, 2) && (_[t] = _[t].call(A));
        _.rel = _.rel || A.rel || e(A).data("rel") || "nofollow", _.href = _.href || e(A).attr("href"), _.title = _.title || A.title, "string" == typeof _.href && (_.href = e.trim(_.href))
    }

    function c(i, o) {
        e(t).trigger(i), dt.trigger(i), e.isFunction(o) && o.call(A)
    }

    function u() {
        var e, t, i, o, n, r = Z + "Slideshow_",
            h = "click." + Z;
        _.slideshow && k[1] ? (t = function() {
            clearTimeout(e)
        }, i = function() {
            (_.loop || k[O + 1]) && (e = setTimeout(Q.next, _.slideshowSpeed))
        }, o = function() {
            S.html(_.slideshowStop).unbind(h).one(h, n), dt.bind(ot, i).bind(it, t).bind(nt, n), g.removeClass(r + "off").addClass(r + "on")
        }, n = function() {
            t(), dt.unbind(ot, i).unbind(it, t).unbind(nt, n), S.html(_.slideshowStart).unbind(h).one(h, function() {
                Q.next(), o()
            }), g.removeClass(r + "on").addClass(r + "off")
        }, _.slideshowAuto ? o() : n()) : g.removeClass(r + "off " + r + "on")
    }

    function f(i) {
        $ || (A = i, d(), k = e(A), O = 0, "nofollow" !== _.rel && (k = e("." + et).filter(function() {
            var t, i = e.data(this, Y);
            return i && (t = e(this).data("rel") || i.rel || this.rel), t === _.rel
        }), O = k.index(A), -1 === O && (k = k.add(A), O = k.length - 1)), w.css({
            opacity: parseFloat(_.opacity),
            cursor: _.overlayClose ? "pointer" : "auto",
            visibility: "visible"
        }).show(), q || (q = U = !0, g.css({
            visibility: "hidden",
            display: "block"
        }), H = o(ct, "LoadedContent", "width:0; height:0; overflow:hidden").appendTo(x), z = y.height() + T.height() + x.outerHeight(!0) - x.height(), D = b.width() + C.width() + x.outerWidth(!0) - x.width(), B = H.outerHeight(!0), N = H.outerWidth(!0), _.w = h(_.initialWidth, "x"), _.h = h(_.initialHeight, "y"), Q.position(), st && E.bind("resize." + at + " scroll." + at, function() {
            w.css({
                width: E.width(),
                height: n(),
                top: E.scrollTop(),
                left: E.scrollLeft()
            })
        }).trigger("resize." + at), u(), c(tt, _.onOpen), K.add(W).hide(), P.html(_.close).show(), g.focus(), t.addEventListener && (t.addEventListener("focus", a, !0), dt.one(rt, function() {
            t.removeEventListener("focus", a, !0)
        })), _.returnFocus && dt.one(rt, function() {
            e(A).focus()
        })), Q.load(!0))
    }

    function p() {
        !g && t.body && (J = !1, E = e(i), g = o(ct).attr({
            id: Y,
            "class": lt ? Z + (st ? "IE6" : "IE") : "",
            role: "dialog",
            tabindex: "-1"
        }).hide(), w = o(ct, "Overlay", st ? "position:absolute" : "").hide(), L = o(ct, "LoadingOverlay").add(o(ct, "LoadingGraphic")), v = o(ct, "Wrapper"), x = o(ct, "Content").append(W = o(ct, "Title"), M = o(ct, "Current"), R = o("button", "Previous"), F = o("button", "Next"), S = o("button", "Slideshow"), L, P = o("button", "Close")), v.append(o(ct).append(o(ct, "TopLeft"), y = o(ct, "TopCenter"), o(ct, "TopRight")), o(ct, !1, "clear:left").append(b = o(ct, "MiddleLeft"), x, C = o(ct, "MiddleRight")), o(ct, !1, "clear:left").append(o(ct, "BottomLeft"), T = o(ct, "BottomCenter"), o(ct, "BottomRight"))).find("div div").css({
            "float": "left"
        }), I = o(ct, !1, "position:absolute; width:9999px; visibility:hidden; display:none"), K = F.add(R).add(M).add(S), e(t.body).append(w, g.append(v, I)))
    }

    function m() {
        function i(e) {
            e.which > 1 || e.shiftKey || e.altKey || e.metaKey || (e.preventDefault(), f(this))
        }
        return g ? (J || (J = !0, F.click(function() {
            Q.next()
        }), R.click(function() {
            Q.prev()
        }), P.click(function() {
            Q.close()
        }), w.click(function() {
            _.overlayClose && Q.close()
        }), e(t).bind("keydown." + Z, function(e) {
            var t = e.keyCode;
            q && _.escKey && 27 === t && (e.preventDefault(), Q.close()), q && _.arrowKey && k[1] && !e.altKey && (37 === t ? (e.preventDefault(), R.click()) : 39 === t && (e.preventDefault(), F.click()))
        }), e.isFunction(e.fn.on) ? e(t).on("click." + Z, "." + et, i) : e("." + et).live("click." + Z, i)), !0) : !1
    }
    var w, g, v, x, y, b, C, T, k, E, H, I, L, W, M, S, F, R, P, K, _, z, D, B, N, A, O, j, q, U, $, G, Q, X, J, V = {
            transition: "elastic",
            speed: 300,
            width: !1,
            initialWidth: "600",
            innerWidth: !1,
            maxWidth: !1,
            height: !1,
            initialHeight: "450",
            innerHeight: !1,
            maxHeight: !1,
            scalePhotos: !0,
            scrolling: !0,
            inline: !1,
            html: !1,
            iframe: !1,
            fastIframe: !0,
            photo: !1,
            href: !1,
            title: !1,
            rel: !1,
            opacity: .9,
            preloading: !0,
            className: !1,
            retinaImage: !1,
            retinaUrl: !1,
            retinaSuffix: "@2x.$1",
            current: "image {current} of {total}",
            previous: "previous",
            next: "next",
            close: "close",
            xhrError: "This content failed to load.",
            imgError: "This image failed to load.",
            open: !1,
            returnFocus: !0,
            reposition: !0,
            loop: !0,
            slideshow: !1,
            slideshowAuto: !0,
            slideshowSpeed: 2500,
            slideshowStart: "start slideshow",
            slideshowStop: "stop slideshow",
            photoRegex: /\.(gif|png|jp(e|g|eg)|bmp|ico)((#|\?).*)?$/i,
            onOpen: !1,
            onLoad: !1,
            onComplete: !1,
            onCleanup: !1,
            onClosed: !1,
            overlayClose: !0,
            escKey: !0,
            arrowKey: !0,
            top: !1,
            bottom: !1,
            left: !1,
            right: !1,
            fixed: !1,
            data: void 0
        },
        Y = "colorbox",
        Z = "cbox",
        et = Z + "Element",
        tt = Z + "_open",
        it = Z + "_load",
        ot = Z + "_complete",
        nt = Z + "_cleanup",
        rt = Z + "_closed",
        ht = Z + "_purge",
        lt = !e.support.leadingWhitespace,
        st = lt && !i.XMLHttpRequest,
        at = Z + "_IE6",
        dt = e({}),
        ct = "div",
        ut = 0;
    e.colorbox || (e(p), Q = e.fn[Y] = e[Y] = function(t, i) {
        var o = this;
        if (t = t || {}, p(), m()) {
            if (e.isFunction(o)) o = e("<a/>"), t.open = !0;
            else if (!o[0]) return o;
            i && (t.onComplete = i), o.each(function() {
                e.data(this, Y, e.extend({}, e.data(this, Y) || V, t))
            }).addClass(et), (e.isFunction(t.open) && t.open.call(o) || t.open) && f(o[0])
        }
        return o
    }, Q.position = function(e, t) {
        function i(e) {
            y[0].style.width = T[0].style.width = x[0].style.width = parseInt(e.style.width, 10) - D + "px", x[0].style.height = b[0].style.height = C[0].style.height = parseInt(e.style.height, 10) - z + "px"
        }
        var o, r, l, s = 0,
            a = 0,
            d = g.offset();
        E.unbind("resize." + Z), g.css({
            top: -9e4,
            left: -9e4
        }), r = E.scrollTop(), l = E.scrollLeft(), _.fixed && !st ? (d.top -= r, d.left -= l, g.css({
            position: "fixed"
        })) : (s = r, a = l, g.css({
            position: "absolute"
        })), a += _.right !== !1 ? Math.max(E.width() - _.w - N - D - h(_.right, "x"), 0) : _.left !== !1 ? h(_.left, "x") : Math.round(Math.max(E.width() - _.w - N - D, 0) / 2), s += _.bottom !== !1 ? Math.max(n() - _.h - B - z - h(_.bottom, "y"), 0) : _.top !== !1 ? h(_.top, "y") : Math.round(Math.max(n() - _.h - B - z, 0) / 2), g.css({
            top: d.top,
            left: d.left,
            visibility: "visible"
        }), e = g.width() === _.w + N && g.height() === _.h + B ? 0 : e || 0, v[0].style.width = v[0].style.height = "9999px", o = {
            width: _.w + N + D,
            height: _.h + B + z,
            top: s,
            left: a
        }, 0 === e && g.css(o), g.dequeue().animate(o, {
            duration: e,
            complete: function() {
                i(this), U = !1, v[0].style.width = _.w + N + D + "px", v[0].style.height = _.h + B + z + "px", _.reposition && setTimeout(function() {
                    E.bind("resize." + Z, Q.position)
                }, 1), t && t()
            },
            step: function() {
                i(this)
            }
        })
    }, Q.resize = function(e) {
        q && (e = e || {}, e.width && (_.w = h(e.width, "x") - N - D), e.innerWidth && (_.w = h(e.innerWidth, "x")), H.css({
            width: _.w
        }), e.height && (_.h = h(e.height, "y") - B - z), e.innerHeight && (_.h = h(e.innerHeight, "y")), e.innerHeight || e.height || (H.css({
            height: "auto"
        }), _.h = H.height()), H.css({
            height: _.h
        }), Q.position("none" === _.transition ? 0 : _.speed))
    }, Q.prep = function(t) {
        function i() {
            return _.w = _.w || H.width(), _.w = _.mw && _.mw < _.w ? _.mw : _.w, _.w
        }

        function n() {
            return _.h = _.h || H.height(), _.h = _.mh && _.mh < _.h ? _.mh : _.h, _.h
        }
        if (q) {
            var h, a = "none" === _.transition ? 0 : _.speed;
            H.empty().remove(), H = o(ct, "LoadedContent").append(t), H.hide().appendTo(I.show()).css({
                width: i(),
                overflow: _.scrolling ? "auto" : "hidden"
            }).css({
                height: n()
            }).prependTo(x), I.hide(), e(j).css({
                "float": "none"
            }), h = function() {
                function t() {
                    lt && g[0].style.removeAttribute("filter")
                }
                var i, n, h = k.length,
                    d = "frameBorder",
                    u = "allowTransparency";
                q && (n = function() {
                    clearTimeout(G), L.hide(), c(ot, _.onComplete)
                }, lt && j && H.fadeIn(100), W.html(_.title).add(H).show(), h > 1 ? ("string" == typeof _.current && M.html(_.current.replace("{current}", O + 1).replace("{total}", h)).show(), F[_.loop || h - 1 > O ? "show" : "hide"]().html(_.next), R[_.loop || O ? "show" : "hide"]().html(_.previous), _.slideshow && S.show(), _.preloading && e.each([r(-1), r(1)], function() {
                    var t, i, o = k[this],
                        n = e.data(o, Y);
                    n && n.href ? (t = n.href, e.isFunction(t) && (t = t.call(o))) : t = e(o).attr("href"), t && l(n, t) && (t = s(n, t), i = new Image, i.src = t)
                })) : K.hide(), _.iframe ? (i = o("iframe")[0], d in i && (i[d] = 0), u in i && (i[u] = "true"), _.scrolling || (i.scrolling = "no"), e(i).attr({
                    src: _.href,
                    name: (new Date).getTime(),
                    "class": Z + "Iframe",
                    allowFullScreen: !0,
                    webkitAllowFullScreen: !0,
                    mozallowfullscreen: !0
                }).one("load", n).appendTo(H), dt.one(ht, function() {
                    i.src = "//about:blank"
                }), _.fastIframe && e(i).trigger("load")) : n(), "fade" === _.transition ? g.fadeTo(a, 1, t) : t())
            }, "fade" === _.transition ? g.fadeTo(a, 0, function() {
                Q.position(0, h)
            }) : Q.position(a, h)
        }
    }, Q.load = function(t) {
        var n, r, a, u = Q.prep,
            f = ++ut;
        U = !0, j = !1, A = k[O], t || d(), X && g.add(w).removeClass(X), _.className && g.add(w).addClass(_.className), X = _.className, c(ht), c(it, _.onLoad), _.h = _.height ? h(_.height, "y") - B - z : _.innerHeight && h(_.innerHeight, "y"), _.w = _.width ? h(_.width, "x") - N - D : _.innerWidth && h(_.innerWidth, "x"), _.mw = _.w, _.mh = _.h, _.maxWidth && (_.mw = h(_.maxWidth, "x") - N - D, _.mw = _.w && _.w < _.mw ? _.w : _.mw), _.maxHeight && (_.mh = h(_.maxHeight, "y") - B - z, _.mh = _.h && _.h < _.mh ? _.h : _.mh), n = _.href, G = setTimeout(function() {
            L.show()
        }, 100), _.inline ? (a = o(ct).hide().insertBefore(e(n)[0]), dt.one(ht, function() {
            a.replaceWith(H.children())
        }), u(e(n))) : _.iframe ? u(" ") : _.html ? u(_.html) : l(_, n) ? (n = s(_, n), e(j = new Image).addClass(Z + "Photo").bind("error", function() {
            _.title = !1, u(o(ct, "Error").html(_.imgError))
        }).one("load", function() {
            var e;
            f === ut && (_.retinaImage && i.devicePixelRatio > 1 && (j.height = j.height / i.devicePixelRatio, j.width = j.width / i.devicePixelRatio), _.scalePhotos && (r = function() {
                j.height -= j.height * e, j.width -= j.width * e
            }, _.mw && j.width > _.mw && (e = (j.width - _.mw) / j.width, r()), _.mh && j.height > _.mh && (e = (j.height - _.mh) / j.height, r())), _.h && (j.style.marginTop = Math.max(_.mh - j.height, 0) / 2 + "px"), k[1] && (_.loop || k[O + 1]) && (j.style.cursor = "pointer", j.onclick = function() {
                Q.next()
            }), lt && (j.style.msInterpolationMode = "bicubic"), setTimeout(function() {
                u(j)
            }, 1))
        }), setTimeout(function() {
            j.src = n
        }, 1)) : n && I.load(n, _.data, function(t, i) {
            f === ut && u("error" === i ? o(ct, "Error").html(_.xhrError) : e(this).contents())
        })
    }, Q.next = function() {
        !U && k[1] && (_.loop || k[O + 1]) && (O = r(1), Q.load())
    }, Q.prev = function() {
        !U && k[1] && (_.loop || O) && (O = r(-1), Q.load())
    }, Q.close = function() {
        q && !$ && ($ = !0, q = !1, c(nt, _.onCleanup), E.unbind("." + Z + " ." + at), w.fadeTo(200, 0), g.stop().fadeTo(300, 0, function() {
            g.add(w).css({
                opacity: 1,
                cursor: "auto"
            }).hide(), c(ht), H.empty().remove(), setTimeout(function() {
                $ = !1, c(rt, _.onClosed)
            }, 1)
        }))
    }, Q.remove = function() {
        e([]).add(g).add(w).remove(), g = null, e("." + et).removeData(Y).removeClass(et), e(t).unbind("click." + Z)
    }, Q.element = function() {
        return e(A)
    }, Q.settings = V)
})(jQuery, document, window);

;
(function(e) {
    function t() {
        var e = document.createElement("input"),
            t = "onpaste";
        return e.setAttribute(t, ""), "function" == typeof e[t] ? "paste" : "input"
    }
    var n, a = t() + ".mask",
        r = navigator.userAgent,
        i = /iphone/i.test(r),
        o = /android/i.test(r);
    e.mask = {
        definitions: {
            9: "[0-9]",
            a: "[A-Za-z]",
            "*": "[A-Za-z0-9]"
        },
        dataName: "rawMaskFn",
        placeholder: "_"
    }, e.fn.extend({
        caret: function(e, t) {
            var n;
            if (0 !== this.length && !this.is(":hidden")) return "number" == typeof e ? (t = "number" == typeof t ? t : e, this.each(function() {
                this.setSelectionRange ? this.setSelectionRange(e, t) : this.createTextRange && (n = this.createTextRange(), n.collapse(!0), n.moveEnd("character", t), n.moveStart("character", e), n.select())
            })) : (this[0].setSelectionRange ? (e = this[0].selectionStart, t = this[0].selectionEnd) : document.selection && document.selection.createRange && (n = document.selection.createRange(), e = 0 - n.duplicate().moveStart("character", -1e5), t = e + n.text.length), {
                begin: e,
                end: t
            })
        },
        unmask: function() {
            return this.trigger("unmask")
        },
        mask: function(t, r) {
            var c, l, s, u, f, h;
            return !t && this.length > 0 ? (c = e(this[0]), c.data(e.mask.dataName)()) : (r = e.extend({
                placeholder: e.mask.placeholder,
                completed: null
            }, r), l = e.mask.definitions, s = [], u = h = t.length, f = null, e.each(t.split(""), function(e, t) {
                "?" == t ? (h--, u = e) : l[t] ? (s.push(RegExp(l[t])), null === f && (f = s.length - 1)) : s.push(null)
            }), this.trigger("unmask").each(function() {
                function c(e) {
                    for (; h > ++e && !s[e];);
                    return e
                }

                function d(e) {
                    for (; --e >= 0 && !s[e];);
                    return e
                }

                function m(e, t) {
                    var n, a;
                    if (!(0 > e)) {
                        for (n = e, a = c(t); h > n; n++)
                            if (s[n]) {
                                if (!(h > a && s[n].test(R[a]))) break;
                                R[n] = R[a], R[a] = r.placeholder, a = c(a)
                            }
                        b(), x.caret(Math.max(f, e))
                    }
                }

                function p(e) {
                    var t, n, a, i;
                    for (t = e, n = r.placeholder; h > t; t++)
                        if (s[t]) {
                            if (a = c(t), i = R[t], R[t] = n, !(h > a && s[a].test(i))) break;
                            n = i
                        }
                }

                function g(e) {
                    var t, n, a, r = e.which;
                    8 === r || 46 === r || i && 127 === r ? (t = x.caret(), n = t.begin, a = t.end, 0 === a - n && (n = 46 !== r ? d(n) : a = c(n - 1), a = 46 === r ? c(a) : a), k(n, a), m(n, a - 1), e.preventDefault()) : 27 == r && (x.val(S), x.caret(0, y()), e.preventDefault())
                }

                function v(t) {
                    var n, a, i, l = t.which,
                        u = x.caret();
                    t.ctrlKey || t.altKey || t.metaKey || 32 > l || l && (0 !== u.end - u.begin && (k(u.begin, u.end), m(u.begin, u.end - 1)), n = c(u.begin - 1), h > n && (a = String.fromCharCode(l), s[n].test(a) && (p(n), R[n] = a, b(), i = c(n), o ? setTimeout(e.proxy(e.fn.caret, x, i), 0) : x.caret(i), r.completed && i >= h && r.completed.call(x))), t.preventDefault())
                }

                function k(e, t) {
                    var n;
                    for (n = e; t > n && h > n; n++) s[n] && (R[n] = r.placeholder)
                }

                function b() {
                    x.val(R.join(""))
                }

                function y(e) {
                    var t, n, a = x.val(),
                        i = -1;
                    for (t = 0, pos = 0; h > t; t++)
                        if (s[t]) {
                            for (R[t] = r.placeholder; pos++ < a.length;)
                                if (n = a.charAt(pos - 1), s[t].test(n)) {
                                    R[t] = n, i = t;
                                    break
                                }
                            if (pos > a.length) break
                        } else R[t] === a.charAt(pos) && t !== u && (pos++, i = t);
                    return e ? b() : u > i + 1 ? (x.val(""), k(0, h)) : (b(), x.val(x.val().substring(0, i + 1))), u ? t : f
                }
                var x = e(this),
                    R = e.map(t.split(""), function(e) {
                        return "?" != e ? l[e] ? r.placeholder : e : void 0
                    }),
                    S = x.val();
                x.data(e.mask.dataName, function() {
                    return e.map(R, function(e, t) {
                        return s[t] && e != r.placeholder ? e : null
                    }).join("")
                }), x.attr("readonly") || x.one("unmask", function() {
                    x.unbind(".mask").removeData(e.mask.dataName)
                }).bind("focus.mask", function() {
                    clearTimeout(n);
                    var e;
                    S = x.val(), e = y(), n = setTimeout(function() {
                        b(), e == t.length ? x.caret(0, e) : x.caret(e)
                    }, 10)
                }).bind("blur.mask", function() {
                    y(), x.val() != S && x.change()
                }).bind("keydown.mask", g).bind("keypress.mask", v).bind(a, function() {
                    setTimeout(function() {
                        var e = y(!0);
                        x.caret(e), r.completed && e == x.val().length && r.completed.call(x)
                    }, 0)
                }), y()
            }))
        }
    })
})(jQuery);;
! function(e) {
    "use strict";
    e(function() {
        e.support.transition = function() {
            var e = function() {
                var e = document.createElement("bootstrap"),
                    t = {
                        WebkitTransition: "webkitTransitionEnd",
                        MozTransition: "transitionend",
                        OTransition: "oTransitionEnd otransitionend",
                        transition: "transitionend"
                    },
                    n;
                for (n in t)
                    if (e.style[n] !== undefined) return t[n]
            }();
            return e && {
                end: e
            }
        }()
    })
}(window.jQuery), ! function(e) {
    "use strict";
    var t = '[data-dismiss="alert"]',
        n = function(n) {
            e(n).on("click", t, this.close)
        };
    n.prototype.close = function(t) {
        function s() {
            i.trigger("closed").remove()
        }
        var n = e(this),
            r = n.attr("data-target"),
            i;
        r || (r = n.attr("href"), r = r && r.replace(/.*(?=#[^\s]*$)/, "")), i = e(r), t && t.preventDefault(), i.length || (i = n.hasClass("alert") ? n : n.parent()), i.trigger(t = e.Event("close"));
        if (t.isDefaultPrevented()) return;
        i.removeClass("in"), e.support.transition && i.hasClass("fade") ? i.on(e.support.transition.end, s) : s()
    };
    var r = e.fn.alert;
    e.fn.alert = function(t) {
        return this.each(function() {
            var r = e(this),
                i = r.data("alert");
            i || r.data("alert", i = new n(this)), typeof t == "string" && i[t].call(r)
        })
    }, e.fn.alert.Constructor = n, e.fn.alert.noConflict = function() {
        return e.fn.alert = r, this
    }, e(document).on("click.alert.data-api", t, n.prototype.close)
}(window.jQuery), ! function(e) {
    "use strict";
    var t = function(t, n) {
        this.$element = e(t), this.options = e.extend({}, e.fn.button.defaults, n)
    };
    t.prototype.setState = function(e) {
        var t = "disabled",
            n = this.$element,
            r = n.data(),
            i = n.is("input") ? "val" : "html";
        e += "Text", r.resetText || n.data("resetText", n[i]()), n[i](r[e] || this.options[e]), setTimeout(function() {
            e == "loadingText" ? n.addClass(t).attr(t, t) : n.removeClass(t).removeAttr(t)
        }, 0)
    }, t.prototype.toggle = function() {
        var e = this.$element.closest('[data-toggle="buttons-radio"]');
        e && e.find(".active").removeClass("active"), this.$element.toggleClass("active")
    };
    var n = e.fn.button;
    e.fn.button = function(n) {
        return this.each(function() {
            var r = e(this),
                i = r.data("button"),
                s = typeof n == "object" && n;
            i || r.data("button", i = new t(this, s)), n == "toggle" ? i.toggle() : n && i.setState(n)
        })
    }, e.fn.button.defaults = {
        loadingText: "loading..."
    }, e.fn.button.Constructor = t, e.fn.button.noConflict = function() {
        return e.fn.button = n, this
    }, e(document).on("click.button.data-api", "[data-toggle^=button]", function(t) {
        var n = e(t.target);
        n.hasClass("btn") || (n = n.closest(".btn")), n.button("toggle")
    })
}(window.jQuery), ! function(e) {
    "use strict";
    var t = function(t, n) {
        this.$element = e(t), this.$indicators = this.$element.find(".carousel-indicators"), this.options = n, this.options.pause == "hover" && this.$element.on("mouseenter", e.proxy(this.pause, this)).on("mouseleave", e.proxy(this.cycle, this))
    };
    t.prototype = {
        cycle: function(t) {
            return t || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(e.proxy(this.next, this), this.options.interval)), this
        },
        getActiveIndex: function() {
            return this.$active = this.$element.find(".item.active"), this.$items = this.$active.parent().children(), this.$items.index(this.$active)
        },
        to: function(t) {
            var n = this.getActiveIndex(),
                r = this;
            if (t > this.$items.length - 1 || t < 0) return;
            return this.sliding ? this.$element.one("slid", function() {
                r.to(t)
            }) : n == t ? this.pause().cycle() : this.slide(t > n ? "next" : "prev", e(this.$items[t]))
        },
        pause: function(t) {
            return t || (this.paused = !0), this.$element.find(".next, .prev").length && e.support.transition.end && (this.$element.trigger(e.support.transition.end), this.cycle()), clearInterval(this.interval), this.interval = null, this
        },
        next: function() {
            if (this.sliding) return;
            return this.slide("next")
        },
        prev: function() {
            if (this.sliding) return;
            return this.slide("prev")
        },
        slide: function(t, n) {
            var r = this.$element.find(".item.active"),
                i = n || r[t](),
                s = this.interval,
                o = t == "next" ? "left" : "right",
                u = t == "next" ? "first" : "last",
                a = this,
                f;
            this.sliding = !0, s && this.pause(), i = i.length ? i : this.$element.find(".item")[u](), f = e.Event("slide", {
                relatedTarget: i[0],
                direction: o
            });
            if (i.hasClass("active")) return;
            this.$indicators.length && (this.$indicators.find(".active").removeClass("active"), this.$element.one("slid", function() {
                var t = e(a.$indicators.children()[a.getActiveIndex()]);
                t && t.addClass("active")
            }));
            if (e.support.transition && this.$element.hasClass("slide")) {
                this.$element.trigger(f);
                if (f.isDefaultPrevented()) return;
                i.addClass(t), i[0].offsetWidth, r.addClass(o), i.addClass(o), this.$element.one(e.support.transition.end, function() {
                    i.removeClass([t, o].join(" ")).addClass("active"), r.removeClass(["active", o].join(" ")), a.sliding = !1, setTimeout(function() {
                        a.$element.trigger("slid")
                    }, 0)
                })
            } else {
                this.$element.trigger(f);
                if (f.isDefaultPrevented()) return;
                r.removeClass("active"), i.addClass("active"), this.sliding = !1, this.$element.trigger("slid")
            }
            return s && this.cycle(), this
        }
    };
    var n = e.fn.carousel;
    e.fn.carousel = function(n) {
        return this.each(function() {
            var r = e(this),
                i = r.data("carousel"),
                s = e.extend({}, e.fn.carousel.defaults, typeof n == "object" && n),
                o = typeof n == "string" ? n : s.slide;
            i || r.data("carousel", i = new t(this, s)), typeof n == "number" ? i.to(n) : o ? i[o]() : s.interval && i.pause().cycle()
        })
    }, e.fn.carousel.defaults = {
        interval: 5e3,
        pause: "hover"
    }, e.fn.carousel.Constructor = t, e.fn.carousel.noConflict = function() {
        return e.fn.carousel = n, this
    }, e(document).on("click.carousel.data-api", "[data-slide], [data-slide-to]", function(t) {
        var n = e(this),
            r, i = e(n.attr("data-target") || (r = n.attr("href")) && r.replace(/.*(?=#[^\s]+$)/, "")),
            s = e.extend({}, i.data(), n.data()),
            o;
        i.carousel(s), (o = n.attr("data-slide-to")) && i.data("carousel").pause().to(o).cycle(), t.preventDefault()
    })
}(window.jQuery), ! function(e) {
    "use strict";
    var t = function(t, n) {
        this.$element = e(t), this.options = e.extend({}, e.fn.collapse.defaults, n), this.options.parent && (this.$parent = e(this.options.parent)), this.options.toggle && this.toggle()
    };
    t.prototype = {
        constructor: t,
        dimension: function() {
            var e = this.$element.hasClass("width");
            return e ? "width" : "height"
        },
        show: function() {
            var t, n, r, i;
            if (this.transitioning || this.$element.hasClass("in")) return;
            t = this.dimension(), n = e.camelCase(["scroll", t].join("-")), r = this.$parent && this.$parent.find("> .accordion-group > .in");
            if (r && r.length) {
                i = r.data("collapse");
                if (i && i.transitioning) return;
                r.collapse("hide"), i || r.data("collapse", null)
            }
            this.$element[t](0), this.transition("addClass", e.Event("show"), "shown"), e.support.transition && this.$element[t](this.$element[0][n])
        },
        hide: function() {
            var t;
            if (this.transitioning || !this.$element.hasClass("in")) return;
            t = this.dimension(), this.reset(this.$element[t]()), this.transition("removeClass", e.Event("hide"), "hidden"), this.$element[t](0)
        },
        reset: function(e) {
            var t = this.dimension();
            return this.$element.removeClass("collapse")[t](e || "auto")[0].offsetWidth, this.$element[e !== null ? "addClass" : "removeClass"]("collapse"), this
        },
        transition: function(t, n, r) {
            var i = this,
                s = function() {
                    n.type == "show" && i.reset(), i.transitioning = 0, i.$element.trigger(r)
                };
            this.$element.trigger(n);
            if (n.isDefaultPrevented()) return;
            this.transitioning = 1, this.$element[t]("in"), e.support.transition && this.$element.hasClass("collapse") ? this.$element.one(e.support.transition.end, s) : s()
        },
        toggle: function() {
            this[this.$element.hasClass("in") ? "hide" : "show"]()
        }
    };
    var n = e.fn.collapse;
    e.fn.collapse = function(n) {
        return this.each(function() {
            var r = e(this),
                i = r.data("collapse"),
                s = e.extend({}, e.fn.collapse.defaults, r.data(), typeof n == "object" && n);
            i || r.data("collapse", i = new t(this, s)), typeof n == "string" && i[n]()
        })
    }, e.fn.collapse.defaults = {
        toggle: !0
    }, e.fn.collapse.Constructor = t, e.fn.collapse.noConflict = function() {
        return e.fn.collapse = n, this
    }, e(document).on("click.collapse.data-api", "[data-toggle=collapse]", function(t) {
        var n = e(this),
            r, i = n.attr("data-target") || t.preventDefault() || (r = n.attr("href")) && r.replace(/.*(?=#[^\s]+$)/, ""),
            s = e(i).data("collapse") ? "toggle" : n.data();
        n[e(i).hasClass("in") ? "addClass" : "removeClass"]("collapsed"), e(i).collapse(s)
    })
}(window.jQuery), ! function(e) {
    "use strict";

    function r() {
        e(t).each(function() {
            i(e(this)).removeClass("open")
        })
    }

    function i(t) {
        var n = t.attr("data-target"),
            r;
        n || (n = t.attr("href"), n = n && /#/.test(n) && n.replace(/.*(?=#[^\s]*$)/, "")), r = n && e(n);
        if (!r || !r.length) r = t.parent();
        return r
    }
    var t = "[data-toggle=dropdown]",
        n = function(t) {
            var n = e(t).on("click.dropdown.data-api", this.toggle);
            e("html").on("click.dropdown.data-api", function() {
                n.parent().removeClass("open")
            })
        };
    n.prototype = {
        constructor: n,
        toggle: function(t) {
            var n = e(this),
                s, o;
            if (n.is(".disabled, :disabled")) return;
            return s = i(n), o = s.hasClass("open"), r(), o || s.toggleClass("open"), n.focus(), !1
        },
        keydown: function(n) {
            var r, s, o, u, a, f;
            if (!/(38|40|27)/.test(n.keyCode)) return;
            r = e(this), n.preventDefault(), n.stopPropagation();
            if (r.is(".disabled, :disabled")) return;
            u = i(r), a = u.hasClass("open");
            if (!a || a && n.keyCode == 27) return n.which == 27 && u.find(t).focus(), r.click();
            s = e("[role=menu] li:not(.divider):visible a", u);
            if (!s.length) return;
            f = s.index(s.filter(":focus")), n.keyCode == 38 && f > 0 && f--, n.keyCode == 40 && f < s.length - 1 && f++, ~f || (f = 0), s.eq(f).focus()
        }
    };
    var s = e.fn.dropdown;
    e.fn.dropdown = function(t) {
        return this.each(function() {
            var r = e(this),
                i = r.data("dropdown");
            i || r.data("dropdown", i = new n(this)), typeof t == "string" && i[t].call(r)
        })
    }, e.fn.dropdown.Constructor = n, e.fn.dropdown.noConflict = function() {
        return e.fn.dropdown = s, this
    }, e(document).on("click.dropdown.data-api", r).on("click.dropdown.data-api", ".dropdown form", function(e) {
        e.stopPropagation()
    }).on(".dropdown-menu", function(e) {
        e.stopPropagation()
    }).on("click.dropdown.data-api", t, n.prototype.toggle).on("keydown.dropdown.data-api", t + ", [role=menu]", n.prototype.keydown)
}(window.jQuery), ! function(e) {
    "use strict";
    var t = function(t, n) {
        this.options = n, this.$element = e(t).delegate('[data-dismiss="modal"]', "click.dismiss.modal", e.proxy(this.hide, this)), this.options.remote && this.$element.find(".modal-body").load(this.options.remote)
    };
    t.prototype = {
        constructor: t,
        toggle: function() {
            return this[this.isShown ? "hide" : "show"]()
        },
        show: function() {
            var t = this,
                n = e.Event("show");
            this.$element.trigger(n);
            if (this.isShown || n.isDefaultPrevented()) return;
            this.isShown = !0, this.escape(), this.backdrop(function() {
                var n = e.support.transition && t.$element.hasClass("fade");
                t.$element.parent().length || t.$element.appendTo(document.body), t.$element.show(), n && t.$element[0].offsetWidth, t.$element.addClass("in").attr("aria-hidden", !1), t.enforceFocus(), n ? t.$element.one(e.support.transition.end, function() {
                    t.$element.focus().trigger("shown")
                }) : t.$element.focus().trigger("shown")
            })
        },
        hide: function(t) {
            t && t.preventDefault();
            var n = this;
            t = e.Event("hide"), this.$element.trigger(t);
            if (!this.isShown || t.isDefaultPrevented()) return;
            this.isShown = !1, this.escape(), e(document).off("focusin.modal"), this.$element.removeClass("in").attr("aria-hidden", !0), e.support.transition && this.$element.hasClass("fade") ? this.hideWithTransition() : this.hideModal()
        },
        enforceFocus: function() {
            var t = this;
            e(document).on("focusin.modal", function(e) {
                t.$element[0] !== e.target && !t.$element.has(e.target).length && t.$element.focus()
            })
        },
        escape: function() {
            var e = this;
            this.isShown && this.options.keyboard ? this.$element.on("keyup.dismiss.modal", function(t) {
                t.which == 27 && e.hide()
            }) : this.isShown || this.$element.off("keyup.dismiss.modal")
        },
        hideWithTransition: function() {
            var t = this,
                n = setTimeout(function() {
                    t.$element.off(e.support.transition.end), t.hideModal()
                }, 500);
            this.$element.one(e.support.transition.end, function() {
                clearTimeout(n), t.hideModal()
            })
        },
        hideModal: function() {
            var e = this;
            this.$element.hide(), this.backdrop(function() {
                e.removeBackdrop(), e.$element.trigger("hidden")
            })
        },
        removeBackdrop: function() {
            this.$backdrop.remove(), this.$backdrop = null
        },
        backdrop: function(t) {
            var n = this,
                r = this.$element.hasClass("fade") ? "fade" : "";
            if (this.isShown && this.options.backdrop) {
                var i = e.support.transition && r;
                this.$backdrop = e('<div class="modal-backdrop ' + r + '" />').appendTo(document.body), this.$backdrop.click(this.options.backdrop == "static" ? e.proxy(this.$element[0].focus, this.$element[0]) : e.proxy(this.hide, this)), i && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in");
                if (!t) return;
                i ? this.$backdrop.one(e.support.transition.end, t) : t()
            } else !this.isShown && this.$backdrop ? (this.$backdrop.removeClass("in"), e.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one(e.support.transition.end, t) : t()) : t && t()
        }
    };
    var n = e.fn.modal;
    e.fn.modal = function(n) {
        return this.each(function() {
            var r = e(this),
                i = r.data("modal"),
                s = e.extend({}, e.fn.modal.defaults, r.data(), typeof n == "object" && n);
            i || r.data("modal", i = new t(this, s)), typeof n == "string" ? i[n]() : s.show && i.show()
        })
    }, e.fn.modal.defaults = {
        backdrop: !0,
        keyboard: !0,
        show: !0
    }, e.fn.modal.Constructor = t, e.fn.modal.noConflict = function() {
        return e.fn.modal = n, this
    }, e(document).on("click.modal.data-api", '[data-toggle="modal"]', function(t) {
        var n = e(this),
            r = n.attr("href"),
            i = e(n.attr("data-target") || r && r.replace(/.*(?=#[^\s]+$)/, "")),
            s = i.data("modal") ? "toggle" : e.extend({
                remote: !/#/.test(r) && r
            }, i.data(), n.data());
        t.preventDefault(), i.modal(s).one("hide", function() {
            n.focus()
        })
    })
}(window.jQuery), ! function(e) {
    "use strict";
    var t = function(e, t) {
        this.init("tooltip", e, t)
    };
    t.prototype = {
        constructor: t,
        init: function(t, n, r) {
            var i, s, o, u, a;
            this.type = t, this.$element = e(n), this.options = this.getOptions(r), this.enabled = !0, o = this.options.trigger.split(" ");
            for (a = o.length; a--;) u = o[a], u == "click" ? this.$element.on("click." + this.type, this.options.selector, e.proxy(this.toggle, this)) : u != "manual" && (i = u == "hover" ? "mouseenter" : "focus", s = u == "hover" ? "mouseleave" : "blur", this.$element.on(i + "." + this.type, this.options.selector, e.proxy(this.enter, this)), this.$element.on(s + "." + this.type, this.options.selector, e.proxy(this.leave, this)));
            this.options.selector ? this._options = e.extend({}, this.options, {
                trigger: "manual",
                selector: ""
            }) : this.fixTitle()
        },
        getOptions: function(t) {
            return t = e.extend({}, e.fn[this.type].defaults, this.$element.data(), t), t.delay && typeof t.delay == "number" && (t.delay = {
                show: t.delay,
                hide: t.delay
            }), t
        },
        enter: function(t) {
            var n = e(t.currentTarget)[this.type](this._options).data(this.type);
            if (!n.options.delay || !n.options.delay.show) return n.show();
            clearTimeout(this.timeout), n.hoverState = "in", this.timeout = setTimeout(function() {
                n.hoverState == "in" && n.show()
            }, n.options.delay.show)
        },
        leave: function(t) {
            var n = e(t.currentTarget)[this.type](this._options).data(this.type);
            this.timeout && clearTimeout(this.timeout);
            if (!n.options.delay || !n.options.delay.hide) return n.hide();
            n.hoverState = "out", this.timeout = setTimeout(function() {
                n.hoverState == "out" && n.hide()
            }, n.options.delay.hide)
        },
        show: function() {
            var t, n, r, i, s, o, u = e.Event("show");
            if (this.hasContent() && this.enabled) {
                this.$element.trigger(u);
                if (u.isDefaultPrevented()) return;
                t = this.tip(), this.setContent(), this.options.animation && t.addClass("fade"), s = typeof this.options.placement == "function" ? this.options.placement.call(this, t[0], this.$element[0]) : this.options.placement, t.detach().css({
                    top: 0,
                    left: 0,
                    display: "block"
                }), this.options.container ? t.appendTo(this.options.container) : t.insertAfter(this.$element), n = this.getPosition(), r = t[0].offsetWidth, i = t[0].offsetHeight;
                switch (s) {
                    case "bottom":
                        o = {
                            top: n.top + n.height,
                            left: n.left + n.width / 2 - r / 2
                        };
                        break;
                    case "top":
                        o = {
                            top: n.top - i,
                            left: n.left + n.width / 2 - r / 2
                        };
                        break;
                    case "left":
                        o = {
                            top: n.top + n.height / 2 - i / 2,
                            left: n.left - r
                        };
                        break;
                    case "right":
                        o = {
                            top: n.top + n.height / 2 - i / 2,
                            left: n.left + n.width
                        }
                }
                this.applyPlacement(o, s), this.$element.trigger("shown")
            }
        },
        applyPlacement: function(e, t) {
            var n = this.tip(),
                r = n[0].offsetWidth,
                i = n[0].offsetHeight,
                s, o, u, a;
            n.offset(e).addClass(t).addClass("in"), s = n[0].offsetWidth, o = n[0].offsetHeight, t == "top" && o != i && (e.top = e.top + i - o, a = !0), t == "bottom" || t == "top" ? (u = 0, e.left < 0 && (u = e.left * -2, e.left = 0, n.offset(e), s = n[0].offsetWidth, o = n[0].offsetHeight), this.replaceArrow(u - r + s, s, "left")) : this.replaceArrow(o - i, o, "top"), a && n.offset(e)
        },
        replaceArrow: function(e, t, n) {
            this.arrow().css(n, e ? 50 * (1 - e / t) + "%" : "")
        },
        setContent: function() {
            var e = this.tip(),
                t = this.getTitle();
            e.find(".tooltip-inner")[this.options.html ? "html" : "text"](t), e.removeClass("fade in top bottom left right")
        },
        hide: function() {
            function i() {
                var t = setTimeout(function() {
                    n.off(e.support.transition.end).detach()
                }, 500);
                n.one(e.support.transition.end, function() {
                    clearTimeout(t), n.detach()
                })
            }
            var t = this,
                n = this.tip(),
                r = e.Event("hide");
            this.$element.trigger(r);
            if (r.isDefaultPrevented()) return;
            return n.removeClass("in"), e.support.transition && this.$tip.hasClass("fade") ? i() : n.detach(), this.$element.trigger("hidden"), this
        },
        fixTitle: function() {
            var e = this.$element;
            (e.attr("title") || typeof e.attr("data-original-title") != "string") && e.attr("data-original-title", e.attr("title") || "").attr("title", "")
        },
        hasContent: function() {
            return this.getTitle()
        },
        getPosition: function() {
            var t = this.$element[0];
            return e.extend({}, typeof t.getBoundingClientRect == "function" ? t.getBoundingClientRect() : {
                width: t.offsetWidth,
                height: t.offsetHeight
            }, this.$element.offset())
        },
        getTitle: function() {
            var e, t = this.$element,
                n = this.options;
            return e = t.attr("data-original-title") || (typeof n.title == "function" ? n.title.call(t[0]) : n.title), e
        },
        tip: function() {
            return this.$tip = this.$tip || e(this.options.template)
        },
        arrow: function() {
            return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
        },
        validate: function() {
            this.$element[0].parentNode || (this.hide(), this.$element = null, this.options = null)
        },
        enable: function() {
            this.enabled = !0
        },
        disable: function() {
            this.enabled = !1
        },
        toggleEnabled: function() {
            this.enabled = !this.enabled
        },
        toggle: function(t) {
            var n = t ? e(t.currentTarget)[this.type](this._options).data(this.type) : this;
            n.tip().hasClass("in") ? n.hide() : n.show()
        },
        destroy: function() {
            this.hide().$element.off("." + this.type).removeData(this.type)
        }
    };
    var n = e.fn.tooltip;
    e.fn.tooltip = function(n) {
        return this.each(function() {
            var r = e(this),
                i = r.data("tooltip"),
                s = typeof n == "object" && n;
            i || r.data("tooltip", i = new t(this, s)), typeof n == "string" && i[n]()
        })
    }, e.fn.tooltip.Constructor = t, e.fn.tooltip.defaults = {
        animation: !0,
        placement: "top",
        selector: !1,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: !1,
        container: !1
    }, e.fn.tooltip.noConflict = function() {
        return e.fn.tooltip = n, this
    }
}(window.jQuery), ! function(e) {
    "use strict";
    var t = function(e, t) {
        this.init("popover", e, t)
    };
    t.prototype = e.extend({}, e.fn.tooltip.Constructor.prototype, {
        constructor: t,
        setContent: function() {
            var e = this.tip(),
                t = this.getTitle(),
                n = this.getContent();
            e.find(".popover-title")[this.options.html ? "html" : "text"](t), e.find(".popover-content")[this.options.html ? "html" : "text"](n), e.removeClass("fade top bottom left right in")
        },
        hasContent: function() {
            return this.getTitle() || this.getContent()
        },
        getContent: function() {
            var e, t = this.$element,
                n = this.options;
            return e = (typeof n.content == "function" ? n.content.call(t[0]) : n.content) || t.attr("data-content"), e
        },
        tip: function() {
            return this.$tip || (this.$tip = e(this.options.template)), this.$tip
        },
        destroy: function() {
            this.hide().$element.off("." + this.type).removeData(this.type)
        }
    });
    var n = e.fn.popover;
    e.fn.popover = function(n) {
        return this.each(function() {
            var r = e(this),
                i = r.data("popover"),
                s = typeof n == "object" && n;
            i || r.data("popover", i = new t(this, s)), typeof n == "string" && i[n]()
        })
    }, e.fn.popover.Constructor = t, e.fn.popover.defaults = e.extend({}, e.fn.tooltip.defaults, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    }), e.fn.popover.noConflict = function() {
        return e.fn.popover = n, this
    }
}(window.jQuery), ! function(e) {
    "use strict";

    function t(t, n) {
        var r = e.proxy(this.process, this),
            i = e(t).is("body") ? e(window) : e(t),
            s;
        this.options = e.extend({}, e.fn.scrollspy.defaults, n), this.$scrollElement = i.on("scroll.scroll-spy.data-api", r), this.selector = (this.options.target || (s = e(t).attr("href")) && s.replace(/.*(?=#[^\s]+$)/, "") || "") + " .nav li > a", this.$body = e("body"), this.refresh(), this.process()
    }
    t.prototype = {
        constructor: t,
        refresh: function() {
            var t = this,
                n;
            this.offsets = e([]), this.targets = e([]), n = this.$body.find(this.selector).map(function() {
                var n = e(this),
                    r = n.data("target") || n.attr("href"),
                    i = /^#\w/.test(r) && e(r);
                return i && i.length && [
                    [i.position().top + (!e.isWindow(t.$scrollElement.get(0)) && t.$scrollElement.scrollTop()), r]
                ] || null
            }).sort(function(e, t) {
                return e[0] - t[0]
            }).each(function() {
                t.offsets.push(this[0]), t.targets.push(this[1])
            })
        },
        process: function() {
            var e = this.$scrollElement.scrollTop() + this.options.offset,
                t = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight,
                n = t - this.$scrollElement.height(),
                r = this.offsets,
                i = this.targets,
                s = this.activeTarget,
                o;
            if (e >= n) return s != (o = i.last()[0]) && this.activate(o);
            for (o = r.length; o--;) s != i[o] && e >= r[o] && (!r[o + 1] || e <= r[o + 1]) && this.activate(i[o])
        },
        activate: function(t) {
            var n, r;
            this.activeTarget = t, e(this.selector).parent(".active").removeClass("active"), r = this.selector + '[data-target="' + t + '"],' + this.selector + '[href="' + t + '"]', n = e(r).parent("li").addClass("active"), n.parent(".dropdown-menu").length && (n = n.closest("li.dropdown").addClass("active")), n.trigger("activate")
        }
    };
    var n = e.fn.scrollspy;
    e.fn.scrollspy = function(n) {
        return this.each(function() {
            var r = e(this),
                i = r.data("scrollspy"),
                s = typeof n == "object" && n;
            i || r.data("scrollspy", i = new t(this, s)), typeof n == "string" && i[n]()
        })
    }, e.fn.scrollspy.Constructor = t, e.fn.scrollspy.defaults = {
        offset: 10
    }, e.fn.scrollspy.noConflict = function() {
        return e.fn.scrollspy = n, this
    }, e(window).on("load", function() {
        e('[data-spy="scroll"]').each(function() {
            var t = e(this);
            t.scrollspy(t.data())
        })
    })
}(window.jQuery), ! function(e) {
    "use strict";
    var t = function(t) {
        this.element = e(t)
    };
    t.prototype = {
        constructor: t,
        show: function() {
            var t = this.element,
                n = t.closest("ul:not(.dropdown-menu)"),
                r = t.attr("data-target"),
                i, s, o;
            r || (r = t.attr("href"), r = r && r.replace(/.*(?=#[^\s]*$)/, ""));
            if (t.parent("li").hasClass("active")) return;
            i = n.find(".active:last a")[0], o = e.Event("show", {
                relatedTarget: i
            }), t.trigger(o);
            if (o.isDefaultPrevented()) return;
            s = e(r), this.activate(t.parent("li"), n), this.activate(s, s.parent(), function() {
                t.trigger({
                    type: "shown",
                    relatedTarget: i
                })
            })
        },
        activate: function(t, n, r) {
            function o() {
                i.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"), t.addClass("active"), s ? (t[0].offsetWidth, t.addClass("in")) : t.removeClass("fade"), t.parent(".dropdown-menu") && t.closest("li.dropdown").addClass("active"), r && r()
            }
            var i = n.find("> .active"),
                s = r && e.support.transition && i.hasClass("fade");
            s ? i.one(e.support.transition.end, o) : o(), i.removeClass("in")
        }
    };
    var n = e.fn.tab;
    e.fn.tab = function(n) {
        return this.each(function() {
            var r = e(this),
                i = r.data("tab");
            i || r.data("tab", i = new t(this)), typeof n == "string" && i[n]()
        })
    }, e.fn.tab.Constructor = t, e.fn.tab.noConflict = function() {
        return e.fn.tab = n, this
    }, e(document).on("click.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(t) {
        t.preventDefault(), e(this).tab("show")
    })
}(window.jQuery), ! function(e) {
    "use strict";
    var t = function(t, n) {
        this.$element = e(t), this.options = e.extend({}, e.fn.typeahead.defaults, n), this.matcher = this.options.matcher || this.matcher, this.sorter = this.options.sorter || this.sorter, this.highlighter = this.options.highlighter || this.highlighter, this.updater = this.options.updater || this.updater, this.source = this.options.source, this.$menu = e(this.options.menu), this.shown = !1, this.listen()
    };
    t.prototype = {
        constructor: t,
        select: function() {
            var e = this.$menu.find(".active").attr("data-value");
            return this.$element.val(this.updater(e)).change(), this.hide()
        },
        updater: function(e) {
            return e
        },
        show: function() {
            var t = e.extend({}, this.$element.position(), {
                height: this.$element[0].offsetHeight
            });
            return this.$menu.insertAfter(this.$element).css({
                top: t.top + t.height,
                left: t.left
            }).show(), this.shown = !0, this
        },
        hide: function() {
            return this.$menu.hide(), this.shown = !1, this
        },
        lookup: function(t) {
            var n;
            return this.query = this.$element.val(), !this.query || this.query.length < this.options.minLength ? this.shown ? this.hide() : this : (n = e.isFunction(this.source) ? this.source(this.query, e.proxy(this.process, this)) : this.source, n ? this.process(n) : this)
        },
        process: function(t) {
            var n = this;
            return t = e.grep(t, function(e) {
                return n.matcher(e)
            }), t = this.sorter(t), t.length ? this.render(t.slice(0, this.options.items)).show() : this.shown ? this.hide() : this
        },
        matcher: function(e) {
            return ~e.toLowerCase().indexOf(this.query.toLowerCase())
        },
        sorter: function(e) {
            var t = [],
                n = [],
                r = [],
                i;
            while (i = e.shift()) i.toLowerCase().indexOf(this.query.toLowerCase()) ? ~i.indexOf(this.query) ? n.push(i) : r.push(i) : t.push(i);
            return t.concat(n, r)
        },
        highlighter: function(e) {
            var t = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
            return e.replace(new RegExp("(" + t + ")", "ig"), function(e, t) {
                return "<strong>" + t + "</strong>"
            })
        },
        render: function(t) {
            var n = this;
            return t = e(t).map(function(t, r) {
                return t = e(n.options.item).attr("data-value", r), t.find("a").html(n.highlighter(r)), t[0]
            }), t.first().addClass("active"), this.$menu.html(t), this
        },
        next: function(t) {
            var n = this.$menu.find(".active").removeClass("active"),
                r = n.next();
            r.length || (r = e(this.$menu.find("li")[0])), r.addClass("active")
        },
        prev: function(e) {
            var t = this.$menu.find(".active").removeClass("active"),
                n = t.prev();
            n.length || (n = this.$menu.find("li").last()), n.addClass("active")
        },
        listen: function() {
            this.$element.on("focus", e.proxy(this.focus, this)).on("blur", e.proxy(this.blur, this)).on("keypress", e.proxy(this.keypress, this)).on("keyup", e.proxy(this.keyup, this)), this.eventSupported("keydown") && this.$element.on("keydown", e.proxy(this.keydown, this)), this.$menu.on("click", e.proxy(this.click, this)).on("mouseenter", "li", e.proxy(this.mouseenter, this)).on("mouseleave", "li", e.proxy(this.mouseleave, this))
        },
        eventSupported: function(e) {
            var t = e in this.$element;
            return t || (this.$element.setAttribute(e, "return;"), t = typeof this.$element[e] == "function"), t
        },
        move: function(e) {
            if (!this.shown) return;
            switch (e.keyCode) {
                case 9:
                case 13:
                case 27:
                    e.preventDefault();
                    break;
                case 38:
                    e.preventDefault(), this.prev();
                    break;
                case 40:
                    e.preventDefault(), this.next()
            }
            e.stopPropagation()
        },
        keydown: function(t) {
            this.suppressKeyPressRepeat = ~e.inArray(t.keyCode, [40, 38, 9, 13, 27]), this.move(t)
        },
        keypress: function(e) {
            if (this.suppressKeyPressRepeat) return;
            this.move(e)
        },
        keyup: function(e) {
            switch (e.keyCode) {
                case 40:
                case 38:
                case 16:
                case 17:
                case 18:
                    break;
                case 9:
                case 13:
                    if (!this.shown) return;
                    this.select();
                    break;
                case 27:
                    if (!this.shown) return;
                    this.hide();
                    break;
                default:
                    this.lookup()
            }
            e.stopPropagation(), e.preventDefault()
        },
        focus: function(e) {
            this.focused = !0
        },
        blur: function(e) {
            this.focused = !1, !this.mousedover && this.shown && this.hide()
        },
        click: function(e) {
            e.stopPropagation(), e.preventDefault(), this.select(), this.$element.focus()
        },
        mouseenter: function(t) {
            this.mousedover = !0, this.$menu.find(".active").removeClass("active"), e(t.currentTarget).addClass("active")
        },
        mouseleave: function(e) {
            this.mousedover = !1, !this.focused && this.shown && this.hide()
        }
    };
    var n = e.fn.typeahead;
    e.fn.typeahead = function(n) {
        return this.each(function() {
            var r = e(this),
                i = r.data("typeahead"),
                s = typeof n == "object" && n;
            i || r.data("typeahead", i = new t(this, s)), typeof n == "string" && i[n]()
        })
    }, e.fn.typeahead.defaults = {
        source: [],
        items: 8,
        menu: '<ul class="typeahead dropdown-menu"></ul>',
        item: '<li><a href="#"></a></li>',
        minLength: 1
    }, e.fn.typeahead.Constructor = t, e.fn.typeahead.noConflict = function() {
        return e.fn.typeahead = n, this
    }, e(document).on("focus.typeahead.data-api", '[data-provide="typeahead"]', function(t) {
        var n = e(this);
        if (n.data("typeahead")) return;
        n.typeahead(n.data())
    })
}(window.jQuery), ! function(e) {
    "use strict";
    var t = function(t, n) {
        this.options = e.extend({}, e.fn.affix.defaults, n), this.$window = e(window).on("scroll.affix.data-api", e.proxy(this.checkPosition, this)).on("click.affix.data-api", e.proxy(function() {
            setTimeout(e.proxy(this.checkPosition, this), 1)
        }, this)), this.$element = e(t), this.checkPosition()
    };
    t.prototype.checkPosition = function() {
        if (!this.$element.is(":visible")) return;
        var t = e(document).height(),
            n = this.$window.scrollTop(),
            r = this.$element.offset(),
            i = this.options.offset,
            s = i.bottom,
            o = i.top,
            u = "affix affix-top affix-bottom",
            a;
        typeof i != "object" && (s = o = i), typeof o == "function" && (o = i.top()), typeof s == "function" && (s = i.bottom()), a = this.unpin != null && n + this.unpin <= r.top ? !1 : s != null && r.top + this.$element.height() >= t - s ? "bottom" : o != null && n <= o ? "top" : !1;
        if (this.affixed === a) return;
        this.affixed = a, this.unpin = a == "bottom" ? r.top - n : null, this.$element.removeClass(u).addClass("affix" + (a ? "-" + a : ""))
    };
    var n = e.fn.affix;
    e.fn.affix = function(n) {
        return this.each(function() {
            var r = e(this),
                i = r.data("affix"),
                s = typeof n == "object" && n;
            i || r.data("affix", i = new t(this, s)), typeof n == "string" && i[n]()
        })
    }, e.fn.affix.Constructor = t, e.fn.affix.defaults = {
        offset: 0
    }, e.fn.affix.noConflict = function() {
        return e.fn.affix = n, this
    }, e(window).on("load", function() {
        e('[data-spy="affix"]').each(function() {
            var t = e(this),
                n = t.data();
            n.offset = n.offset || {}, n.offsetBottom && (n.offset.bottom = n.offsetBottom), n.offsetTop && (n.offset.top = n.offsetTop), t.affix(n)
        })
    })
}(window.jQuery);;
! function($) {
    "use strict";
    var Tab = function(element) {
        this.element = $(element)
    }
    Tab.prototype = {
        constructor: Tab,
        show: function() {
            var $this = this.element,
                $ul = $this.closest('ul:not(.dropdown-menu)'),
                selector = $this.attr('data-target'),
                previous, $target, e
            if (!selector) {
                selector = $this.attr('href')
                selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '')
            }
            if ($this.parent('li').hasClass('active')) return
            previous = $ul.find('.active:last a')[0]
            e = $.Event('show', {
                relatedTarget: previous
            })
            $this.trigger(e)
            if (e.isDefaultPrevented()) return
            $target = $(selector)
            this.activate($this.parent('li'), $ul)
            this.activate($target, $target.parent(), function() {
                $this.trigger({
                    type: 'shown',
                    relatedTarget: previous
                })
            })
        },
        activate: function(element, container, callback) {
            var $active = container.find('> .active'),
                transition = callback && $.support.transition && $active.hasClass('fade')

            function next() {
                $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active')
                element.addClass('active')
                if (transition) {
                    element[0].offsetWidth
                    element.addClass('in')
                } else {
                    element.removeClass('fade')
                }
                if (element.parent('.dropdown-menu')) {
                    element.closest('li.dropdown').addClass('active')
                }
                callback && callback()
            }
            transition ? $active.one($.support.transition.end, next) : next()
            $active.removeClass('in')
        }
    }
    var old = $.fn.tab
    $.fn.tab = function(option) {
        return this.each(function() {
            var $this = $(this),
                data = $this.data('tab')
            if (!data) $this.data('tab', (data = new Tab(this)))
            if (typeof option == 'string') data[option]()
        })
    }
    $.fn.tab.Constructor = Tab
    $.fn.tab.noConflict = function() {
        $.fn.tab = old
        return this
    }
    $(document).on('click.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function(e) {
        e.preventDefault()
        $(this).tab('show')
    })
}(window.jQuery);;
(function(l, f) {
    function m() {
        var a = e.elements;
        return "string" == typeof a ? a.split(" ") : a
    }

    function i(a) {
        var b = n[a[o]];
        b || (b = {}, h++, a[o] = h, n[h] = b);
        return b
    }

    function p(a, b, c) {
        b || (b = f);
        if (g) return b.createElement(a);
        c || (c = i(b));
        b = c.cache[a] ? c.cache[a].cloneNode() : r.test(a) ? (c.cache[a] = c.createElem(a)).cloneNode() : c.createElem(a);
        return b.canHaveChildren && !s.test(a) ? c.frag.appendChild(b) : b
    }

    function t(a, b) {
        if (!b.cache) b.cache = {}, b.createElem = a.createElement, b.createFrag = a.createDocumentFragment, b.frag = b.createFrag();
        a.createElement = function(c) {
            return !e.shivMethods ? b.createElem(c) : p(c, a, b)
        };
        a.createDocumentFragment = Function("h,f", "return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&(" + m().join().replace(/\w+/g, function(a) {
            b.createElem(a);
            b.frag.createElement(a);
            return 'c("' + a + '")'
        }) + ");return n}")(e, b.frag)
    }

    function q(a) {
        a || (a = f);
        var b = i(a);
        if (e.shivCSS && !j && !b.hasCSS) {
            var c, d = a;
            c = d.createElement("p");
            d = d.getElementsByTagName("head")[0] || d.documentElement;
            c.innerHTML = "x<style>article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}mark{background:#FF0;color:#000}</style>";
            c = d.insertBefore(c.lastChild, d.firstChild);
            b.hasCSS = !!c
        }
        g || t(a, b);
        return a
    }
    var k = l.html5 || {},
        s = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,
        r = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,
        j, o = "_html5shiv",
        h = 0,
        n = {},
        g;
    (function() {
        try {
            var a = f.createElement("a");
            a.innerHTML = "<xyz></xyz>";
            j = "hidden" in a;
            var b;
            if (!(b = 1 == a.childNodes.length)) {
                f.createElement("a");
                var c = f.createDocumentFragment();
                b = "undefined" == typeof c.cloneNode || "undefined" == typeof c.createDocumentFragment || "undefined" == typeof c.createElement
            }
            g = b
        } catch (d) {
            g = j = !0
        }
    })();
    var e = {
        elements: k.elements || "abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",
        version: "3.6.2pre",
        shivCSS: !1 !== k.shivCSS,
        supportsUnknownElements: g,
        shivMethods: !1 !== k.shivMethods,
        type: "default",
        shivDocument: q,
        createElement: p,
        createDocumentFragment: function(a, b) {
            a || (a = f);
            if (g) return a.createDocumentFragment();
            for (var b = b || i(a), c = b.frag.cloneNode(), d = 0, e = m(), h = e.length; d < h; d++) c.createElement(e[d]);
            return c
        }
    };
    l.html5 = e;
    q(f)
})(this, document);